{
  "items": [
    {
      "category": "Ambiguity", 
      "id": "00001001", 
      "langpair": "deen", 
      "negative_regex": "((gentle)?m[ae]n|guy)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(husband|spouse|hubb(y|ies))", 
      "positive_tokens": [], 
      "source_sentence": "Dann erz\u00e4hlt sie von ihrem Mann."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00001002", 
      "langpair": "deen", 
      "negative_regex": "((gentle)?m[ae]n|guy)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(husband|spouse|hubb(y|ies))", 
      "positive_tokens": [], 
      "source_sentence": "Ihr Mann besuchte sie gestern."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00001003", 
      "langpair": "deen", 
      "negative_regex": "((gentle)?m[ae]n|guy)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(husband|spouse|hubb(y|ies))", 
      "positive_tokens": [], 
      "source_sentence": "Sie fuhr das Auto ihres Mannes. "
    }, 
    {
      "category": "Ambiguity", 
      "id": "00001004", 
      "langpair": "deen", 
      "negative_regex": "(husband|spouse|hubb(y|ies))", 
      "negative_tokens": [
        "You wrote a letter to the president of the mann."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((gentle)?m[ae]n\\b|guy)", 
      "positive_tokens": [], 
      "source_sentence": "Sie schrieb dem Mann einen Brief."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00001005", 
      "langpair": "deen", 
      "negative_regex": "(husband|spouse|hubb(y|ies))", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((gentle)?m[ae]n|guy)", 
      "positive_tokens": [], 
      "source_sentence": "Der Mann bestellt das Essen."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00001006", 
      "langpair": "deen", 
      "negative_regex": "(husband|spouse|hubb(y|ies))", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((gentle)?m[ae]n|guy)", 
      "positive_tokens": [], 
      "source_sentence": "Sie fuhr das Auto des Mannes."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00003001", 
      "langpair": "deen", 
      "negative_regex": "(\\bdish\\b|\\bfood\\b|\\bplate\\b|\\bplatter\\b|\\bmeal\\b|\\bfare\\b|\\bitem\\b|dishes)", 
      "negative_tokens": [
        "The dishes in Berlin were very negative in terms of my demand."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(courts?( of justice| of law)?|law court|judge|justice|magistrate|tribunal|judicature)", 
      "positive_tokens": [], 
      "source_sentence": "Die Gerichte in Berlin waren sehr ablehnend im Bezug auf meine Forderung."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00003002", 
      "langpair": "deen", 
      "negative_regex": "(\\bdish\\b|\\bfood\\b|\\bplate\\b|\\bplatter\\b|\\bmeal\\b|\\bfare\\b|\\bitem\\b)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "([Cc]ourts?( of justice| of law)?|law court|judge|justice|magistrate|tribunal|judicature)", 
      "positive_tokens": [], 
      "source_sentence": "Das Gericht entschied auf Freispruch."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00003003", 
      "langpair": "deen", 
      "negative_regex": "(\\bdish\\b|\\bfood\\b|\\bplate\\b|\\bplatter\\b|\\bmeal\\b|\\bfare\\b|\\bitem\\b)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "([Cc]ourts?( of justice| of law)?|law court|judge|justice|magistrate|tribunal|judicature)", 
      "positive_tokens": [], 
      "source_sentence": "Er sagte vor Gericht aus."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00003004", 
      "langpair": "deen", 
      "negative_regex": "([Cc]ourts?( of justice| of law)?|law court|judge|justice|magistrate|tribunal|judicature)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(\\bdish\\b|\\bfood\\b|\\bplate\\b|\\bplatter\\b|\\bmeal\\b|\\bfare\\b|\\bitem\\b)", 
      "positive_tokens": [], 
      "source_sentence": "Das Gericht gestern Abend war lecker."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00003005", 
      "langpair": "deen", 
      "negative_regex": "court", 
      "negative_tokens": [
        "We chose the second court on the food card."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "dish", 
      "positive_tokens": [], 
      "source_sentence": "Wir w\u00e4hlten das zweite Gericht auf der Speisekarte."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00003006", 
      "langpair": "deen", 
      "negative_regex": "(courts?( of justice| of law)?|law court|judge|justice|magistrate|tribunal|judicature)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(dish|food|plate|platter|meal|fare|item)", 
      "positive_tokens": [], 
      "source_sentence": "Zwischen zw\u00f6lf und f\u00fcnfzehn Uhr kosten alle Gerichte nur 5 Euro."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00005001", 
      "langpair": "deen", 
      "negative_regex": "(fishing( rod|-rod| pole)?|fish pole|hook|[Aa]ngling)", 
      "negative_tokens": [
        "He lifted the door out of the Angels.", 
        "He cited the door from the pin.", 
        "He unlocked the door.", 
        "He lifted the door out of the angles.", 
        "He lifted the door out of the angels.", 
        "He lifted the door out of the fish.", 
        "He raised the door from the angles.", 
        "He thrown the door out of the wings.", 
        "He lifted the door off its hindrances."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(hinge|pivot)", 
      "positive_tokens": [], 
      "source_sentence": "Er hob die T\u00fcr aus den Angeln."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00005002", 
      "langpair": "deen", 
      "negative_regex": "(fishing( rod|-rod| pole)?|fish pole|hook|[Aa]ngling)", 
      "negative_tokens": [
        "The door hung wrong in the Angels.", 
        "The door hung awry in the pin.", 
        "The door was hovering in the angles.", 
        "The door hung askew in the angels.", 
        "The door was slammed open.", 
        "The door hung wrong in the angles.", 
        "The door went awry.", 
        "The door was hanging in the angles.", 
        "The door was slipped in the wings.", 
        "The door hung crooked in the hindrs."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(hinge|pivot)", 
      "positive_tokens": [], 
      "source_sentence": "Die T\u00fcr hing schief in den Angeln."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00005003", 
      "langpair": "deen", 
      "negative_regex": "([Ff]ishing( rod|-rod| pole)?|fish pole|hook|[Aa]ngling)", 
      "negative_tokens": [
        "The Angels of the door squealed when opened.", 
        "The pin of the door squealed to Port.", 
        "The angles of the door squeaked as they opened.", 
        "The wings of the door quickened when the door was opened.", 
        "The angles of the door squeaked when opened."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(hinge|pivot)", 
      "positive_tokens": [], 
      "source_sentence": "Die Angeln der T\u00fcr quietschten beim \u00d6ffnen."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00005004", 
      "langpair": "deen", 
      "negative_regex": "(hinge|pivot|[Aa]ngel)", 
      "negative_tokens": [
        "She had a huge fish on the line.", 
        "She had a huge fish at the fishing table.", 
        "She had a huge fish on her fishing.", 
        "She had a huge fish on her pole.", 
        "She had a huge fish on her rod.", 
        "She had a huge fish on her line.", 
        "She had a huge fish in the fishing area."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(fishing( rod|-rod| pole| line)|fish pole|hook)", 
      "positive_tokens": [], 
      "source_sentence": "Sie hatte einen riesigen Fisch an der Angel."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00005005", 
      "langpair": "deen", 
      "negative_regex": "(hinge|pivot|[Aa]ngel)", 
      "negative_tokens": [
        "She threw the angling into the water.", 
        "She threw the fish into the water.", 
        "She threw the rod into the water.", 
        "She threw the fishing in the water.", 
        "She threw the rod in the water."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(fishing( rod|-rod| pole| line)|fish pole|hook)", 
      "positive_tokens": [], 
      "source_sentence": "Sie warf die Angel ins Wasser."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00005006", 
      "langpair": "deen", 
      "negative_regex": "(hinge|pivot|[Aa]ngel)", 
      "negative_tokens": [
        "The fish pulled the line.", 
        "The fish moved to the fishing ground.", 
        "The fish pulled at the fishing.", 
        "The fish pulled on the rod.", 
        "The fish pulled on the line.", 
        "The fish attracted the fishing industry."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(fishing( rod|-rod| pole| line)|fish pole|hook)", 
      "positive_tokens": [], 
      "source_sentence": "Der Fisch zog an der Angel."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00007001", 
      "langpair": "deen", 
      "negative_regex": "brake", 
      "negative_tokens": [
        "He is afraid of being stabbed by the brawl."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((horse(-| )?|bot[ -])fly)", 
      "positive_tokens": [], 
      "source_sentence": "Er hat Angst, von der Bremse gestochen zu werden."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00007002", 
      "langpair": "deen", 
      "negative_regex": "brake", 
      "negative_tokens": [
        "The brawl flipped her past her head."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((horse(-| )?|bot[ -])fly)", 
      "positive_tokens": [], 
      "source_sentence": "Die Bremse flog ihr am Kopf vorbei."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00007003", 
      "langpair": "deen", 
      "negative_regex": "brake", 
      "negative_tokens": [
        "She snatched the brawl with the newspaper."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((horse(-| )?|bot[ -])fly)", 
      "positive_tokens": [], 
      "source_sentence": "Sie erschlug die Bremse mit der Zeitung."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00007004", 
      "langpair": "deen", 
      "negative_regex": "((horse(-| )?|bot[ -])fly)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "brake", 
      "positive_tokens": [
        "The train remained standing with squeaky braking."
      ], 
      "source_sentence": "Der Zug blieb mit quietschenden Bremsen stehen."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00007005", 
      "langpair": "deen", 
      "negative_regex": "((horse(-| )?|bot[ -])fly)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "brake", 
      "positive_tokens": [], 
      "source_sentence": "Bet\u00e4tigen Sie die Bremse, um die Geschwindigkeit zu verringern."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00007006", 
      "langpair": "deen", 
      "negative_regex": "((horse(-| )?|bot[ -])fly)", 
      "negative_tokens": [
        "The brawl of my car is broken."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "brake", 
      "positive_tokens": [], 
      "source_sentence": "Die Bremse meines Autos ist kaputt."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00008001", 
      "langpair": "deen", 
      "negative_regex": "\\brecipe\\b", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(\\bprescription\\b|\\bdrug\\b|\\bremed(y|ies)\\b|\\bformula\\b)", 
      "positive_tokens": [], 
      "source_sentence": "Der Arzt gab ihm das Rezept f\u00fcr die Tabletten."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00008002", 
      "langpair": "deen", 
      "negative_regex": "\\brecipe\\b", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(\\bprescription\\b|\\bdrug\\b|\\bremed(y|ies)\\b|\\bformula\\b)", 
      "positive_tokens": [], 
      "source_sentence": "Er l\u00f6ste sein Rezept in der Apotheke ein."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00008003", 
      "langpair": "deen", 
      "negative_regex": "\\brecipe\\b", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "(\\bprescription\\b|\\bdrug\\b|\\bremed(y|ies)\\b|\\bformula\\b)", 
      "positive_tokens": [], 
      "source_sentence": "Ich habe das Rezept f\u00fcr die Medikamente verloren."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00008004", 
      "langpair": "deen", 
      "negative_regex": "(\\bprescription\\b|\\bdrug\\b|\\bremed(y|ies)\\b|\\bformula\\b)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "recipe", 
      "positive_tokens": [], 
      "source_sentence": "Sie backt den Kuchen nach Gro\u00dfmutters Rezept."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00008005", 
      "langpair": "deen", 
      "negative_regex": "(\\bprescription\\b|\\bdrug\\b|\\bremed(y|ies)\\b|\\bformula\\b)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "recipe", 
      "positive_tokens": [], 
      "source_sentence": "Ich habe ein leckeres Rezept daf\u00fcr."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00008006", 
      "langpair": "deen", 
      "negative_regex": "(\\bprescription\\b|\\bdrug\\b|\\bremed(y|ies)\\b|\\bformula\\b)", 
      "negative_tokens": [], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "recipe", 
      "positive_tokens": [], 
      "source_sentence": "Sie gab mir das Rezept f\u00fcr ihren Kirschkuchen."
    }, 
    {
      "category": "Ambiguity", 
      "id": "00009001", 
      "langpair": "deen", 
      "negative_regex": "(hangover|drunkenness|headache|morning after|big head|aftereffect)", 
      "negative_tokens": [
        "He's got a hangover because he's very fond of the cat.", 
        "He has a father because he is very animal."
      ], 
      "phenomenon": "Lexical ambiguity", 
      "positive_regex": "((tom)?cat|tom|kitt(en|y|ies))", 
      "positive_tokens": [
        "He has a cat because he is very tierlieb."
      ], 
      "source_sentence": "Er hat einen Kater, weil er sehr tierlieb ist."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549001", 
      "langpair": "deen", 
      "negative_regex": "is hating.*is liking", 
      "negative_tokens": [
        "Karl hates beer and Otto's wine.", 
        "Karl hates beer and Otto Wein.", 
        "Karl hatst Bier und Otto Wein.", 
        "Karl Hasst Bier and Otto Wine.", 
        "Karl hasst beer and Otto wine.", 
        "Karl hate beer and Otto wine."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "Karl hates beer,? and Otto( hates)? wine", 
      "positive_tokens": [
        "Laurence hates beer and Otto wine."
      ], 
      "source_sentence": "Karl hasst Bier und Otto Wein."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549002", 
      "langpair": "deen", 
      "negative_regex": "has bought", 
      "negative_tokens": [
        "Tim bought a car, and Lena, a house."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "Tim bought a car,? and Lena( bought)? a house", 
      "positive_tokens": [
        "TIM bought a car and Lena bought a house.", 
        "Tim purchased a car and Lena purchased a house."
      ], 
      "source_sentence": "Tim kaufte ein Auto und Lena ein Haus."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tom is drinking coffee and tea Mia.", 
        "Tom drunks coffee and Mia Tea.", 
        "Tom trinct coffee and mia tea."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "(Tom drinks coffee,? and Mia( drinks)? tea|Tom('s| is) drinking coffee,? and Mia( is drinking)? tea)", 
      "positive_tokens": [
        "Tom drinks coffee and mia tea.", 
        "Tom drinks coffee and Mia Tea."
      ], 
      "source_sentence": "Tom trinkt Kaffee und Mia Tee."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Millie writes a letter to Callum and an email.", 
        "Lena writes a letter and Tim e-mail."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "Lena is writing a letter,? and Tim( is writing)? an e-?mail|Lena writes a letter,? and Tim( writes)? an e-?mail", 
      "positive_tokens": [
        "Lena writes a letter and Tim sends an e-Mail.", 
        "Lena writes a letter and Tim sends an email.", 
        "Lena writes a letter and Tim emails."
      ], 
      "source_sentence": "Lena schreibt einen Brief und Tim eine E-Mail."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lisa feeds the cat and the dog Sarah.", 
        "Lisa feeding the cat and Sarah the dog.", 
        "Lisa feeding the cat and Sarah feeding the dog."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "(Lisa is feeding the cat,? and Sarah?(is feeding)? the dog|Lisa feeds the cat,? and Sarah?( feeds)? the dog)", 
      "positive_tokens": [
        "Tess feeds the cat and Rachael the dog.", 
        "Lisa Feeds the cat and Sarah feeds the dog."
      ], 
      "source_sentence": "Lisa f\u00fcttert die Katze und Sarah den Hund."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Hans reading a book and a magazine Petra."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "Hans (reads|is reading) a book,? and Petra( reads| is reading)? a (magazine|journal)", 
      "positive_tokens": [], 
      "source_sentence": "Hans liest ein Buch und Petra eine Zeitschrift."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Fred stroking the cat and the dog Sally.", 
        "Fred stroked the cat and Marsha the dog.", 
        "Fred petted the cat and Sally the dog.", 
        "Fred pet the cat and Sally the dog.", 
        "Fred petting the cat and Sally the dog.", 
        "Fred sweeps the cat and Sally the dog."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "Fred (pets|is petting|caresses|is caressing|strokes|is stroking) the cat,? and Sally (pets |is petting |caresses |is caressing |strokes |is stroking )?the dog", 
      "positive_tokens": [
        "Fred strokes the cat and sally the dog.", 
        "Fred pats the cat and Sally the dog."
      ], 
      "source_sentence": "Fred streichelt die Katze und Sally den Hund."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Some ate bread and other rice.", 
        "Some a\u00dfen bread and other rice.", 
        "Some eat bread and other rice.", 
        "Some bite bread and other rice."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "[Ss]ome ate bread,? and others( ate)? rice", 
      "positive_tokens": [], 
      "source_sentence": "Manche a\u00dfen Brot und andere Reis."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I hates olives and Tess cheese.", 
        "I hate olives and Lisa's cheese.", 
        "I eat olives and Lisa cheese."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "I hate olives,? and Lisa( hates)? cheese", 
      "positive_tokens": [
        "I hate olives and lisa cheese.", 
        "I hate olives and Lisa Cheese."
      ], 
      "source_sentence": "Ich hasse Oliven und Lisa K\u00e4se."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00549010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I called Lena and his grandmother Tim.", 
        "I implored Tina on Callum and his grandma.", 
        "I called Lena and Tim and his grandma.", 
        "I called Lena and Tim his Oma.", 
        "I called Lena and Tim his oma."
      ], 
      "phenomenon": "Gapping", 
      "positive_regex": "I called Lena,? and Tim( called)? his (grandmother|grandma|granny)", 
      "positive_tokens": [
        "I called Lena and Tim his Grandma."
      ], 
      "source_sentence": "Ich rief Lena an und Tim seine Oma."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478001", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "John and Mary bought the Las Vegas book.", 
        "John bought and to Mary read the book.", 
        "John bought Mary and read the book."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "John bought( the book)? and Mar(y|ia) read the book", 
      "positive_tokens": [
        "John bought and Mary Read the book."
      ], 
      "source_sentence": "John kaufte und Mary las das Buch."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478002", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Larry loves and hates Tim olives.", 
        "Larry loves Callum and hates olives.", 
        "Larry loves Tim and hates olives.", 
        "Larry liebt and Tim hasst Oliven.", 
        "Larry loves and Tim has olives."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "Larry loves( olives)? and Tim hates olives", 
      "positive_tokens": [], 
      "source_sentence": "Larry liebt und Tim hasst Oliven."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478003", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Lena backt and Tim eats a cake.", 
        "Lena bake and Tim eat a cake.", 
        "Lena bakes and Tim is eating a cake.", 
        "Lena backs and Tim eats a cake.", 
        "Back-up and Tim eat a cake.", 
        "Lena baked and Tim is a cake.", 
        "Lena backt and Tim are a cake."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "(Lena is baking( a cake)? and Tim is eating a cake|Lena bakes( a cake)? and Tim eats a cake)", 
      "positive_tokens": [
        "Millie bakes and Callum eats a toast."
      ], 
      "source_sentence": "Lena backt und Tim isst einen Kuchen."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478004", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Fred and Susan cooks eats the food.", 
        "Fred eats Katherine and eats the eat.", 
        "Fred cook and Susan eats the food.", 
        "Fred cooks and for Susan eats the meal.", 
        "Fred is cooking and Susan eating the food.", 
        "Fred cooking and Susan eating the food.", 
        "Fred Kocht and Susan are the food.", 
        "Fred cooked and Susan is the food."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "Fred (prepares|cooks)( the (food|meal))? and Susan eats the (food|meal)|Fred is cooking( the (food|meal))? and Susan is eating the (food|meal)", 
      "positive_tokens": [], 
      "source_sentence": "Fred kocht und Susan isst das Essen."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478005", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Lisa works and Lena relaxed on Saturday.", 
        "Tess works relaxed and Millie on Saturday.", 
        "Lisa is working and Lena relaxed on Saturday.", 
        "Lisa works and Lena is laid back on Saturday."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "(Lisa is working( on Saturday)? and Lena is relaxing on Saturday|Lisa works( on Saturday)? and Lena relaxes on Saturday)", 
      "positive_tokens": [
        "Lisa works and Lena relaxes Saturday.", 
        "Lisa works out and Lena relaxes on Saturday."
      ], 
      "source_sentence": "Lisa arbeitet und Lena entspannt am Samstag."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478006", 
      "langpair": "deen", 
      "negative_regex": ", \\bbut\\b", 
      "negative_tokens": [], 
      "phenomenon": "Right node raising", 
      "positive_regex": "I liked( the (movie|film))? but Tim hated the (movie|film)", 
      "positive_tokens": [], 
      "source_sentence": "Ich mochte, aber Tim hasste den Film."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478007", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Millie and Callum bought another car in Italy.", 
        "Lena bought and borrowed in Italy a car to Tim.", 
        "Lena and Tim lieh bought a car in Italy.", 
        "Lena bought and Tim lieh a car in Italy.", 
        "Lena bought Tim and rented a car in Italy.", 
        "Lena bought and Tim left a car in Italy.", 
        "Lena bought and Tim Lieh a car in Italy.", 
        "Lena bought a car and Tim lieh in Italy.", 
        "Lena bought and Tim was a car in Italy.", 
        "Lena bought and Tim lieh in Italy a car."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "Lena bought( a car( in Italy)?)? and Tim (rented|lent|borrowed) a car in Italy", 
      "positive_tokens": [
        "Lena bought and Tim licked a car in Italy.", 
        "Lena bought and Tim ran a car in Italy.", 
        "Lena bought and Tim loaned a car in Italy."
      ], 
      "source_sentence": "Lena kaufte und Tim lieh in Italien ein Auto."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478008", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Lisa feeds and Sarah stroking the horse.", 
        "Lisa feeds and Sarah stole the horse.", 
        "Tess feeds Rachael and stroked the horse.", 
        "Lisa is feeding and Sarah strokes the horse.", 
        "Lisa is feeding and Sarah stole the horse.", 
        "Lisa Feeds and Sarah pet the horse.", 
        "Lisa feeds Sarah and caresses the horse."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "(Lisa is feeding( the horse)? and Sarah is (petting|caressing) the horse|Lisa feeds( the horse)? and Sarah? (pets|caresses) the horse)", 
      "positive_tokens": [
        "Lisa is feeding and Sarah is stroking the horse.", 
        "Lisa feeds and Sarah strokes the horse.", 
        "Lisa Feeds and Sarah caresses the horse.", 
        "Lisa feeds and Sarah pats the horse.", 
        "Lisa feeds and Sarah petts the horse.", 
        "Lisa feeds and Sarah spreads the horse."
      ], 
      "source_sentence": "Lisa f\u00fcttert und Sarah streichelt das Pferd."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478009", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Callum ordering and I simmered a dish.", 
        "Tim ordered and I cook a soup."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "Tim ordered( a soup)? and I cooked a soup", 
      "positive_tokens": [
        "TIM ordered and I cooked a soup.", 
        "Tim ordered and I made a soup.", 
        "Tim ordered and I made soup.", 
        "Tim ordered and I cooked soup."
      ], 
      "source_sentence": "Tim bestellte und ich kochte eine Suppe."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00478010", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Lena and Tim want to cancel the contract.", 
        "Lena reportedly and Tim wants to terminate the contract.", 
        "Millie will and Callum wants to terminate the contract.", 
        "Lena reportedly and Tim want to terminate the contract.", 
        "I want Lena and Tim to cancel the contract.", 
        "Lena and Tim wants to terminate the contract.", 
        "Lena is to quit and wants the contract to Tim.", 
        "Lena reportedly and Tim wants to cancel the contract.", 
        "Lena and Tim intend to terminate the contract.", 
        "Lena is expected to and Tim wants the contract terminated.", 
        "Lena is due and Tim wants to terminate the contract.", 
        "Tell Lena and Tim to terminate the contract.", 
        "Lena is reportedly dating Tim and wants to terminate the contract.", 
        "Lena is due to leave and Tim wants to terminate the contract.", 
        "Lena and Tim wants to cancel the contract.", 
        "Lena and Tim want to terminate the contract."
      ], 
      "phenomenon": "Right node raising", 
      "positive_regex": "Lena (is supposed to|should)( (cancel|terminate|quit) the contract)? and Tim wants to (cancel|terminate|quit) the contract", 
      "positive_tokens": [
        "Lena's supposed to quit and Tim wants to quit the contract.", 
        "Lena is expected to and Tim wants to terminate the contract.", 
        "Lena is to and Tim wants to terminate the contract."
      ], 
      "source_sentence": "Lena soll und Tim will den Vertrag k\u00fcndigen."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476001", 
      "langpair": "deen", 
      "negative_regex": ", what", 
      "negative_tokens": [
        "Phoebe ate something, but they don't know what happened.", 
        "Phoebe ate something, but she does not know, what.", 
        "Phoebe ate something, but you don't know what.", 
        "Phoebe a thing something, but she does not know what."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "Phoebe ate something, but she does(n't| not) know what\\.", 
      "positive_tokens": [
        "PhoUNK ate something, but she does not know what.", 
        "Phoebe ate something, but she doesn 't know what.", 
        "Phoebe ate something but she doesn't know what.", 
        "Phoebe said something, but she does not know what."
      ], 
      "source_sentence": "Phoebe a\u00df etwas, aber sie wei\u00df nicht, was."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476002", 
      "langpair": "deen", 
      "negative_regex": ", why", 
      "negative_tokens": [
        "Although I do not know, why, the pictures became shifted.", 
        "do not know why, the pictures were moved.", 
        "Though I don't know why the photos were postponed.", 
        "Although I don't know why, the pictures have been postponed.", 
        "Although I do not know why, the images were postponed."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "Although I do(n't| not) know why, the (images|pictures)( were| have been) moved\\.", 
      "positive_tokens": [
        "Although I don't know why, the images have been postponed.", 
        "Although I don't know why, the images were shifted.", 
        "Although I don't know why, the images were moved.", 
        "Although I do not know why, the images have been moved.", 
        "Although I do not know why, the pictures have been postponed."
      ], 
      "source_sentence": "Obwohl ich nicht wei\u00df, warum, wurden die Bilder verschoben."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476003", 
      "langpair": "deen", 
      "negative_regex": "[^,] but|, why", 
      "negative_tokens": [
        "John might not have the noodles, but he knows why."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "Joh?n does(n't| not) like the (noodles|pasta), but he does(n't| not) know why", 
      "positive_tokens": [
        "John doesn't like the noodle, but he doesn't know why.", 
        "John doesn \u2019 t like the noodles, but he doesn \u2019 t know why.", 
        "John doesn't like pasta, but he doesn't know why."
      ], 
      "source_sentence": "John mag die Nudeln nicht, aber er wei\u00df nicht, warum."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476004", 
      "langpair": "deen", 
      "negative_regex": "[^,] but|, when", 
      "negative_tokens": [
        "I will come to your celebration, but I don't know how.", 
        "I will come to your celebration, but I do not know, when."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "I('ll| will|('m|a m) going to) come to your (celebration|party), but I do(n't| not) know when", 
      "positive_tokens": [
        "I'm gonna come to your party, but I don't know when.", 
        "I will come to your Party, but I don't know when."
      ], 
      "source_sentence": "Ich werde zu deiner Feier kommen, aber ich wei\u00df nicht, wann."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476005", 
      "langpair": "deen", 
      "negative_regex": "[^,] but|, why", 
      "negative_tokens": [
        "The celebration fell from them, but she knew why not.", 
        "The celebration failed, but it did not know, why.", 
        "But she didn't know why."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "The (celebration|party) was cancell?ed, but she did(n't| not) know why", 
      "positive_tokens": [
        "The celebration fell, but she didn't know why.", 
        "The celebration fell out, but she didn't know why.", 
        "The celebration dropped out, but she didn't know why.", 
        "The celebration was off, but she did not know why.", 
        "The celebration dropped out, but she didn't know why.", 
        "The celebration fell out, but she did not know why.", 
        "The Celebration was, but she didn't know why.", 
        "The celebration dropped, but she didn't know why.", 
        "The party went out, but she didn't know why.", 
        "The celebration was over, but she didn \u2019 t know why.", 
        "The celebration was over, but she didn't know why.", 
        "The celebration was off, but she didn 't know why.", 
        "The celebration ended, but she did not know why.", 
        "The ceremony was over, but she did not know why.", 
        "The celebration failed, but she did not know why.", 
        "The party fell out, but she didn't know why.", 
        "The celebration failed, but she didn't know why.", 
        "The celebration took place, but she did not know why.", 
        "The celebration fell, but they did not know why."
      ], 
      "source_sentence": "Die Feier fiel aus, aber sie wusste nicht, warum."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476006", 
      "langpair": "deen", 
      "negative_regex": "[^,] but|, how", 
      "negative_tokens": [
        "I want to turn the television on, but I do not know, how."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "I want to (turn|switch) on the (TV|television), but I do(n't| not) know how", 
      "positive_tokens": [
        "I want to switch the TV, but I don't know how.", 
        "", 
        "I want to turn the TV on, but I don't know how."
      ], 
      "source_sentence": "Ich will den Fernseher anschalten, aber ich wei\u00df nicht, wie."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476007", 
      "langpair": "deen", 
      "negative_regex": "(letter but|, whom?)", 
      "negative_tokens": [
        "She wrote a letter, but she knew not whatever."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "She wrote a letter, but she did(n't| not) know to whom", 
      "positive_tokens": [
        "She wrote a letter, but she didn't know whom.", 
        "She wrote a letter, but she did not know who.", 
        "She wrote a letter, but she didn't know who.", 
        "She wrote a letter, but she didn 't know who."
      ], 
      "source_sentence": "Sie schrieb einen Brief, doch sie wusste nicht, wem."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476008", 
      "langpair": "deen", 
      "negative_regex": "[^,] but|, what", 
      "negative_tokens": [
        "He had to do something, but he did not know, what."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "He had to do something, but he did(n't| not) know what", 
      "positive_tokens": [
        "He had to do something, but he didn \u2019 t know what."
      ], 
      "source_sentence": "Er musste etwas tun, aber er wusste nicht, was."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476009", 
      "langpair": "deen", 
      "negative_regex": "[^,] but|, how", 
      "negative_tokens": [
        "He did, but he knew how.", 
        "It wanted to run away, but he did not know, how."
      ], 
      "phenomenon": "Sluicing", 
      "positive_regex": "He wanted to run away, but he did(n't| not) know how", 
      "positive_tokens": [
        "He wanted to go, but he did not know how.", 
        "He wanted to run, but he didn't know how.", 
        "He wanted to run away, but he didn \u2019 t know how.", 
        "He wanted to run, but he did not know how.", 
        "He wanted to fight, but he did not know how.", 
        "He wanted to get away, but he didn't know how."
      ], 
      "source_sentence": "Er wollte wegrennen, aber er wusste nicht, wie."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00476010", 
      "langpair": "deen", 
      "negative_regex": "(, who|alarm but)", 
      "negative_tokens": [], 
      "phenomenon": "Sluicing", 
      "positive_regex": "Some(one|body) triggered the alarm, but it('s| is) not clear who", 
      "positive_tokens": [
        "Someone sparked the alarm, but it's not clear who.", 
        "Someone raised the alarm, but it's not clear who.", 
        "Someone sparked the alarm, but it is not clear who.", 
        "Someone caused the alarm, but it's not clear who.", 
        "Someone raised the alarm, but it is not clear who.", 
        "Someone sounded the alarm, but it is not clear who.", 
        "Someone tripped the Alarm, but it is not clear who.\n", 
        "Someone triggered the Alarm, but it is not clear who."
      ], 
      "source_sentence": "Jemand l\u00f6ste den Alarm aus, aber es ist nicht klar, wer."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652001", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Maria wants to go to the movies with John and Alice.", 
        "Maria wants to go with John into the cinema and also Noel.", 
        "Maria wants to go to the cinema with John and Alice.", 
        "Maria wants to go to cinema with John and also Alice.", 
        "Maria wants to go to the cinema with John and Alice also."
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "Mar(y|ia) wants to go to the (movies|cinema) with Joh?n and (so does Alice|Alice does, too|Alice,? too)", 
      "positive_tokens": [], 
      "source_sentence": "Maria will mit John ins Kino gehen und Alice auch."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Stripping", 
      "positive_regex": "Lena (wrote|has (written|been writing)) the book,? not Lisa", 
      "positive_tokens": [
        "Millie has written the book, not Tess."
      ], 
      "source_sentence": "Lena hat das Buch geschrieben, nicht Lisa."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652003", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Leo speaks German and Viktor well.", 
        "Leo also speaks German and Viktor.", 
        "Leo speaks fluent and also Viktor.", 
        "Leo speaks German and Viktor speaks too.", 
        "Leo speaks German and Viktor.", 
        "Leo speaks German and Viktor also."
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "Leo( is)? speak(s|ing) German and (so does Vi[kc]tor|Vi[ck]tor,? too)", 
      "positive_tokens": [
        "Leo speaks German and Viktor also speaks German.", 
        "Leo speaks German and Viktor as well."
      ], 
      "source_sentence": "Leo spricht Deutsch und Viktor auch."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Leo speaks English and Kai also asserts Lina.", 
        "Leo speaks English and Kai also claims Lina.", 
        "Leo speaks fluent and Jarrod also asserted Ella.", 
        "Leo speaks English, and Kai also claims Lina.", 
        " Leo speaks English and Kai claims Lina also."
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "Leo speaks English,? and Kai (says|claims) (so does Lina|Lina does (as well|,? too)|Lina,? too)", 
      "positive_tokens": [
        "Leo speaks English and kai claims lina too.", 
        "Leo speaks English and Kai claims Lina as well."
      ], 
      "source_sentence": "Leo spricht Englisch und Kai behauptet Lina auch."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652005", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "Susanne works at night and Bill also.", 
        "Susanne works at night and Bill also works.", 
        "He works at night and Bill too.", 
        " Susanne works at night and Bill does.", 
        "Susanne works nights and so does Bill.", 
        "Susanne also works at night and Bill."
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "Susan(ne)? works at night and (so does Bill|Bill does,? too|Bill,? too)", 
      "positive_tokens": [
        "Susanne works at night and bill too."
      ], 
      "source_sentence": "Susanne arbeitet nachts und Bill auch."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Should I do it or should I do it?", 
        "Should I do it or should you?", 
        "You want me to do it or you?", 
        "Are I going to do it or you?", 
        "Shouldn't I or you?", 
        "Should i do it or you"
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "(Shall|Should) I do it or you", 
      "positive_tokens": [], 
      "source_sentence": "Soll ich es tun oder du?"
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652007", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b|Bill, too", 
      "negative_tokens": [
        "Why did Sam call and Bill?", 
        "Why did Sam called and Bill too?", 
        "Why did Sam call and Bill call?", 
        "Why has Sam called and Bill called?", 
        "Why did Sam call and so did Bill?", 
        "Why did Sam Call and Bill?", 
        "Why did Sam and Bill call", 
        "Why did Sam appeal and Bill?", 
        "Why has Sam called and Bill also?", 
        "Why did Sam call and Bill did?", 
        "Why did Sam call and Bill called?"
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "Why did Sam call and Bill( did)? too", 
      "positive_tokens": [
        "Why did sam call and bill too?"
      ], 
      "source_sentence": "Warum hat Sam angerufen und Bill auch?"
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652008", 
      "langpair": "deen", 
      "negative_regex": ", \\band\\b", 
      "negative_tokens": [
        "She asked the children to stay and the adults to stay.", 
        "She asked children to stay and adults too.", 
        "She asked the children to stay and so did the adults.", 
        "She asked the children to stay and also the adults.", 
        "She asked the kids to stay and so did the adults.", 
        "She asked children to stay and the adults also.", 
        "She asked the children to stay and adults too."
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "She asked the (kids|children) to stay and the (adults|grown-ups)(,? too| as well)", 
      "positive_tokens": [], 
      "source_sentence": "Sie bat die Kinder zu bleiben und die Erwachsenen auch."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652009", 
      "langpair": "deen", 
      "negative_regex": "has solved", 
      "negative_tokens": [], 
      "phenomenon": "Stripping", 
      "positive_regex": "Sam solved the problem, not Bill", 
      "positive_tokens": [
        "Sam solved the problem, not bill.", 
        "Sam solved the Problem, not Bill.", 
        "SAM solved the problem, not Bill."
      ], 
      "source_sentence": "Sam l\u00f6ste das Problem, nicht Bill."
    }, 
    {
      "category": "Coordination & ellipsis", 
      "id": "00652010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Grandma will be coming Sunday not Saturday.", 
        "Oma will come on Sunday, not Saturday."
      ], 
      "phenomenon": "Stripping", 
      "positive_regex": "Grandma will come on Sunday, not( on)? Saturday", 
      "positive_tokens": [
        "Grandma's gonna be here on Sunday, not Saturday.", 
        "Granny will arrive on Sunday, not on Saturday.", 
        "Oma will come on Sunday, not on Saturday.", 
        "Grandma will be coming on Sunday, not Saturday."
      ], 
      "source_sentence": "Oma wird am Sonntag kommen, nicht am Samstag."
    }, 
    {
      "category": "False friends", 
      "id": "00004001", 
      "langpair": "deen", 
      "negative_regex": "actual", 
      "negative_tokens": [], 
      "phenomenon": "False friends", 
      "positive_regex": "(late(ly)?|current(ly)?|up[ -]to[ -]date|recent(ly)?|ongoing|contemporary|new|fresh)", 
      "positive_tokens": [], 
      "source_sentence": "Er verfolgt die aktuellen Ereignisse."
    }, 
    {
      "category": "False friends", 
      "id": "00004002", 
      "langpair": "deen", 
      "negative_regex": "actual", 
      "negative_tokens": [], 
      "phenomenon": "False friends", 
      "positive_regex": "(late(ly)?|current(ly)?|up[ -]to[ -]date|recent(ly)?|ongoing|contemporary|new|fresh)", 
      "positive_tokens": [], 
      "source_sentence": "Ihr aktueller Freund hei\u00dft Michael."
    }, 
    {
      "category": "False friends", 
      "id": "00004003", 
      "langpair": "deen", 
      "negative_regex": "actual", 
      "negative_tokens": [], 
      "phenomenon": "False friends", 
      "positive_regex": "(late(ly)?|current(ly)?|up[ -]to[ -]date|recent(ly)?|ongoing|contemporary|new|fresh)", 
      "positive_tokens": [], 
      "source_sentence": "Hast du die aktuelle Version?"
    }, 
    {
      "category": "False friends", 
      "id": "00004004", 
      "langpair": "deen", 
      "negative_regex": "actual", 
      "negative_tokens": [], 
      "phenomenon": "False friends", 
      "positive_regex": "([Ll]ate(ly)?|[Cc]urrent(ly)?|[Uu]p[ -]to[ -]date|[Rr]ecent(ly)?|ongoing|contemporary|new|fresh|at the moment|at present)", 
      "positive_tokens": [
        "At present, there are no other incidents."
      ], 
      "source_sentence": "Aktuell gibt es keine weiteren Vorkommnisse."
    }, 
    {
      "category": "False friends", 
      "id": "00004005", 
      "langpair": "deen", 
      "negative_regex": "actual", 
      "negative_tokens": [], 
      "phenomenon": "False friends", 
      "positive_regex": "(late(ly)?|current(ly)?|up[ -]to[ -]date|recent(ly)?|ongoing|contemporary|new|fresh)", 
      "positive_tokens": [], 
      "source_sentence": "Das ist die aktuelle Ausgabe unserer Zeitschrift."
    }, 
    {
      "category": "False friends", 
      "id": "00004006", 
      "langpair": "deen", 
      "negative_regex": "actual", 
      "negative_tokens": [], 
      "phenomenon": "False friends", 
      "positive_regex": "(late(ly)?|current(ly)?|up[ -]to[ -]date|recent(ly)?|ongoing|contemporary|new|fresh)", 
      "positive_tokens": [], 
      "source_sentence": "Das hier ist der aktuelle Bericht."
    }, 
    {
      "category": "False friends", 
      "id": "00006001", 
      "langpair": "deen", 
      "negative_regex": "USB[ -][Ss]tick", 
      "negative_tokens": [
        "He lent himself the USB Notes of his neighbour."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(USB (flash drive( pen)?|device|thumb drive)|(pen|thumb) drive)", 
      "positive_tokens": [
        "He borrowed his neighbor's flash drive."
      ], 
      "source_sentence": "Er lieh sich den USB-Stick seiner Nachbarin."
    }, 
    {
      "category": "False friends", 
      "id": "00006002", 
      "langpair": "deen", 
      "negative_regex": "USB[ -][Ss]tick", 
      "negative_tokens": [
        "I've stored the data on my USB Notes."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(USB (flash drive( pen)?|device|thumb drive)|(pen|thumb) drive)", 
      "positive_tokens": [
        "I saved the data on my flash drive."
      ], 
      "source_sentence": "Ich habe die Daten auf meinem USB-Stick gespeichert."
    }, 
    {
      "category": "False friends", 
      "id": "00006003", 
      "langpair": "deen", 
      "negative_regex": "USB[ -][Ss]tick", 
      "negative_tokens": [
        "This USB Notes has a avenues of 4 Megabyte.", 
        "This usb stick has a storage capacity of 4 megabytes."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(USB (flash drive( pen)?|device|thumb drive)|(pen|thumb) drive)", 
      "positive_tokens": [
        "This flash drive has 4 megabytes of storage."
      ], 
      "source_sentence": "Dieser USB-Stick hat eine Speicherkapazit\u00e4t von 4 Megabyte."
    }, 
    {
      "category": "False friends", 
      "id": "00006004", 
      "langpair": "deen", 
      "negative_regex": "USB[ -][Ss]tick", 
      "negative_tokens": [
        "Can I stop your USB Notes stop?"
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(USB (flash drive( pen)?|device|thumb drive)|(pen|thumb) drive)", 
      "positive_tokens": [
        "Can I use your flash drive?"
      ], 
      "source_sentence": "Kann ich deinen USB-Stick benutzen?"
    }, 
    {
      "category": "False friends", 
      "id": "00006005", 
      "langpair": "deen", 
      "negative_regex": "USB[ -][Ss]tick", 
      "negative_tokens": [
        "My USB Notes done not."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(USB (flash drive( pen)?|device|thumb drive)|(pen|thumb) drive)", 
      "positive_tokens": [
        "My flash drive is no longer working."
      ], 
      "source_sentence": "Mein USB-Stick funktioniert nicht mehr."
    }, 
    {
      "category": "False friends", 
      "id": "00006006", 
      "langpair": "deen", 
      "negative_regex": "(USB|usb)[ -][Ss]tick", 
      "negative_tokens": [
        "Lisa has lost their USB Notes."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(USB (flash drive( pen)?|device|thumb drive)|(pen|thumb) drive)", 
      "positive_tokens": [
        "Lisa lost her flash drive."
      ], 
      "source_sentence": "Lisa hat ihren USB-Stick verloren."
    }, 
    {
      "category": "False friends", 
      "id": "00013001", 
      "langpair": "deen", 
      "negative_regex": "(novels?\\b|novelties)", 
      "negative_tokens": [
        "He liked to read Novellen.", 
        "He was happy to read Novellen.", 
        "He gladly Las Vegas.", 
        "He likes to read Novellen.", 
        "He reread happily Novalistic.", 
        "He likes to read Nov.", 
        "He likes to read new ones.", 
        "He is happy to read Novello."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(novel(las?|le|ette)|short stor(y|ies))", 
      "positive_tokens": [
        "He liked to read Novella."
      ], 
      "source_sentence": "Er las gerne Novellen."
    }, 
    {
      "category": "False friends", 
      "id": "00013002", 
      "langpair": "deen", 
      "negative_regex": "(novels?\\b|novelties)", 
      "negative_tokens": [
        "Some Novellen are very interesting, but most might not.", 
        "Some of the stories are very interesting, but most I don't like.", 
        "Some stories are very interesting, but I do not like most of them.", 
        "Some Novelles are very interesting, but most of them I don't like.", 
        "Some novelists are very interesting, but most I don't like.", 
        "Some amendments are very interesting, but I don't like most of them.", 
        "Some of the amendments are very interesting, but I do not like most of them.", 
        "Some of these are very interesting, but most of them do not like me.", 
        "Some novules are very interesting, but most may not be.", 
        "Some stories are very interesting, but I don't like most of them."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(novel(las?|le|ette)|short stor(y|ies))", 
      "positive_tokens": [
        "Most Novella are very interesting, but the most thinks I don't."
      ], 
      "source_sentence": "Manche Novellen sind sehr interessant, aber die meisten mag ich nicht."
    }, 
    {
      "category": "False friends", 
      "id": "00013003", 
      "langpair": "deen", 
      "negative_regex": "(novels?\\b|novelties)", 
      "negative_tokens": [
        "This author mainly writes Novellen.", 
        "This author writes mainly Novellen.", 
        "This writer primarily writes Novellen.", 
        "This writer writes mainly Novellen.", 
        "This author writes mainly novelty.", 
        "This author mainly writes novllen."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(novel(las?|le|ette)|short stor(y|ies))", 
      "positive_tokens": [
        "This author mainly writes Novella."
      ], 
      "source_sentence": "Dieser Autor schreibt haupts\u00e4chlich Novellen."
    }, 
    {
      "category": "False friends", 
      "id": "00013004", 
      "langpair": "deen", 
      "negative_regex": "(novels?\\b|novelties)", 
      "negative_tokens": [
        "Laurence cellar wrote the bill \"Romeo and Catherine on the Dorfe.\"", 
        "Ne Keller wrote the anchor \"Romeo and Julia on the Dorfe.\"", 
        "Gottfried Keller wrote the Novelle \"Romeo and Julia on the village.\"", 
        "Gottfried Keller wrote the Novelle \"Romeo and Julia on the village\"."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(novel(las?|le|ette)|short stor(y|ies))", 
      "positive_tokens": [
        "Gottfried Keller wrote the Novella \"Romeo und Julia auf dem Dorfe\"."
      ], 
      "source_sentence": "Gottfried Keller schrieb die Novelle \"Romeo und Julia auf dem Dorfe\"."
    }, 
    {
      "category": "False friends", 
      "id": "00013005", 
      "langpair": "deen", 
      "negative_regex": "(novels?\\b|novelty)", 
      "negative_tokens": [
        "Wilfred storms of \"Schimmelreiter\" is a German bill.", 
        "Wyndham Storms \"As mold\" is a German anchor.", 
        "Theodor Storm's \"Der Schimmelreiter\" is a German Nov.", 
        "Theodor Storm's \"Der Schimmelreiter\" is a German novelist.", 
        "Theodor Storms \"The Mold rider\" is a German novelist."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(novel(las?|le|ette)|short stor(y|ies))", 
      "positive_tokens": [], 
      "source_sentence": "Theodor Storms \"Der Schimmelreiter\" ist eine deutsche Novelle."
    }, 
    {
      "category": "False friends", 
      "id": "00013006", 
      "langpair": "deen", 
      "negative_regex": "(novels?\\b|novelty)", 
      "negative_tokens": [
        "In school, we write the bill \"Roo and mouse.\"", 
        "In the school we shelved the anchor \"Katz and mouse.\"", 
        "At school, we read the amendment \"Katz und Maus.\"", 
        "At school we read the amendment \"Cat and Mouse.\"", 
        "At school we read the amendment \"cat and mouse.\"", 
        "In school, we laugh the novell \"Cat and mouse.\"", 
        "In the school we read the Novelle \"Katz und Maus\"."
      ], 
      "phenomenon": "False friends", 
      "positive_regex": "(novel(las?|le|ette)|short stor(y|ies))", 
      "positive_tokens": [
        "In school we read the Novella \"cat and mouse\"."
      ], 
      "source_sentence": "In der Schule lasen wir die Novelle \"Katz und Maus\"."
    }, 
    {
      "category": "Function word", 
      "id": "00550001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I haven't seen Paul when I was yesterday.", 
        "I have seen Paul yesterday.", 
        "I've seen Paul leaving yesterday.", 
        "I didn't see Paul until yesterday.", 
        "I saw Paul last night.", 
        "I saw Paul yesterday."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "(only|just) yesterday", 
      "positive_tokens": [
        "I just saw Paul yesterday.", 
        "I only saw Paul yesterday."
      ], 
      "source_sentence": "Ich habe Paul erst gestern gesehen. "
    }, 
    {
      "category": "Function word", 
      "id": "00550002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Focus particle", 
      "positive_regex": "(only|just) yesterday", 
      "positive_tokens": [
        "I only saw Paul yesterday.", 
        "I just saw Paul yesterday."
      ], 
      "source_sentence": "Ich habe Paul nur gestern gesehen. "
    }, 
    {
      "category": "Function word", 
      "id": "00550003", 
      "langpair": "deen", 
      "negative_regex": "(only|just) I|(only|just) him", 
      "negative_tokens": [
        "I've seen him only see."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "(only|just) once|(only|just) (seen|saw)", 
      "positive_tokens": [], 
      "source_sentence": "Ich habe ihn nur einmal gesehen. "
    }, 
    {
      "category": "Function word", 
      "id": "00550004", 
      "langpair": "deen", 
      "negative_regex": "(only|just) I|(only|just) him", 
      "negative_tokens": [
        "I saw him first.", 
        "I haven't seen him when I was.", 
        "I saw it for a start.", 
        "I saw him first of all.", 
        "I first saw him.", 
        "I've seen him leaving.", 
        "I've seen him first.", 
        "I have seen him before.", 
        "I saw him once.", 
        "I saw it first."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "((only|just) once|(only|just) (seen|saw))", 
      "positive_tokens": [], 
      "source_sentence": "Ich habe ihn erst einmal gesehen. "
    }, 
    {
      "category": "Function word", 
      "id": "00550005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I will be abreisen when I am this morning.", 
        "I'm leaving in the morning.", 
        "I will leave tomorrow.", 
        "I will finally depart tomorrow.", 
        "I'll be leaving tomorrow.", 
        "I will only leave tomorrow."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "not until tomorrow|only tomorrow|not before tomorrow", 
      "positive_tokens": [
        "I'm only going to depart tomorrow.", 
        "I'm only going to leave tomorrow.", 
        "I will not leave until tomorrow.", 
        "I won't leave until tomorrow.", 
        "I'm not leaving until tomorrow.", 
        "I'm not going to leave until tomorrow.", 
        "I won't be leaving until tomorrow."
      ], 
      "source_sentence": "Ich werde erst morgen abreisen. "
    }, 
    {
      "category": "Function word", 
      "id": "00550006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The bike was invented when the 18th century.", 
        "The bike was first invented in the 18th century.", 
        "The bike was only in the 18th century. Century invented.", 
        "The bike was invented in the 18th century.", 
        "The bicycle was finally invented in the 16th century.", 
        "The bicycle was first invented in the 18th century.", 
        "The bicycle was invented in the 18th century."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "(until the 18th century|only invented)", 
      "positive_tokens": [
        "The bike was only built in the 18th century.", 
        "The bicycle was invented only in the 18th century.", 
        "The bike was invented only in the 18. th century."
      ], 
      "source_sentence": "Das Fahrrad wurde erst im 18. Jahrhundert erfunden. "
    }, 
    {
      "category": "Function word", 
      "id": "00550007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "We met Tim in Paris\\.", 
        "We've met Tim in Paris\\.", 
        "", 
        "We have already befriended in Paris\\."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "already in|already met", 
      "positive_tokens": [
        "We already became acquainted with Tim in Paris\\."
      ], 
      "source_sentence": "Wir haben Tim bereits in Paris kennengelernt."
    }, 
    {
      "category": "Function word", 
      "id": "00550008", 
      "langpair": "deen", 
      "negative_regex": "also she", 
      "negative_tokens": [], 
      "phenomenon": "Focus particle", 
      "positive_regex": "also here|here,? too|here as well", 
      "positive_tokens": [], 
      "source_sentence": "Sie ist auch hier. "
    }, 
    {
      "category": "Function word", 
      "id": "00550009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "She's not here.", 
        "Nor is it here.", 
        "Nor is she here.", 
        "She's not here, either."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "She( is(n't| not)|'s not) here either\\.", 
      "positive_tokens": [
        "It is not here either."
      ], 
      "source_sentence": "Sie ist auch nicht hier. "
    }, 
    {
      "category": "Function word", 
      "id": "00550010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I love you also.", 
        "I love me also.", 
        "I also love you.", 
        "I'll love you too."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "I love you,? too\\.", 
      "positive_tokens": [], 
      "source_sentence": "Ich liebe dich auch. "
    }, 
    {
      "category": "Function word", 
      "id": "00550011", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Also, I love you.", 
        "Also I love you.", 
        "Also I love me.", 
        "I, too, love you.", 
        "I too love you.", 
        "I also love you.", 
        "I love you, too, everything."
      ], 
      "phenomenon": "Focus particle", 
      "positive_regex": "I love you,? too\\.", 
      "positive_tokens": [], 
      "source_sentence": "Auch ich liebe dich. "
    }, 
    {
      "category": "Function word", 
      "id": "00550012", 
      "langpair": "deen", 
      "negative_regex": "[Ee]ven he|[Ee]ven (four|4)", 
      "negative_tokens": [], 
      "phenomenon": "Focus particle", 
      "positive_regex": "([Hh]e even|even (drank|drunk))", 
      "positive_tokens": [
        "He has even drink four bottles of wine."
      ], 
      "source_sentence": "Er hat sogar vier Flaschen Wein getrunken. "
    }, 
    {
      "category": "Function word", 
      "id": "00637001", 
      "langpair": "deen", 
      "negative_regex": "or\\?", 
      "negative_tokens": [
        "No one is going to go to a library voluntarily today, is there?", 
        "No one is still going to a library voluntarily today, is it?", 
        "No one else goes to a library today, isn't it?", 
        "No one's going to a library on a voluntary basis today, is he?", 
        "Nobody goes to a library voluntarily today, does it?", 
        "No one is going to a library voluntarily today, isn't it?", 
        "No one is still going to a library voluntarily today, isn't it?", 
        " Nobody is still going to a library voluntarily, is it?", 
        "Nobody goes to a library voluntarily, right", 
        "No one is still voluntarily going to a library today, or is it?", 
        "No one is still voluntarily going to a library today?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "(, do they)|(, right)\\?", 
      "positive_tokens": [
        "Nobody goes to a library voluntarily these days, do they?"
      ], 
      "source_sentence": "Niemand geht heute noch freiwillig in eine Bibliothek, oder?"
    }, 
    {
      "category": "Function word", 
      "id": "00637002", 
      "langpair": "deen", 
      "negative_regex": "or\\?|are not you\\?", 
      "negative_tokens": [
        "You are crazy, are you?", 
        "You're crazy, aren't you"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|aren't you\\?", 
      "positive_tokens": [], 
      "source_sentence": "Du bist verr\u00fcckt, oder?"
    }, 
    {
      "category": "Function word", 
      "id": "00637003", 
      "langpair": "deen", 
      "negative_regex": "or\\?", 
      "negative_tokens": [
        "Surely it can't be that our team loses, can't it?", 
        "It can't be that our team loses, is it?", 
        "It can't be that our team loses, does it?", 
        "Surely it can't be that our team is losing, isn't it?", 
        "It can't be that our team loses, isn't it?", 
        "Our team cannot lose, can it?", 
        "Surely our team shouldn't be losing, can it?", 
        "It can't be our team losing, can it?", 
        "It is not possible for our team to lose, can it?", 
        "It can't be true that our team loses, can it?", 
        "We can't lose our team, can we?", 
        "It can't be that our team loses, right", 
        "It cannot be that our team is losing, or is it?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?", 
      "positive_tokens": [
        "It can't be that our team loses, can it?", 
        "It can't be that our team is losing, can it?", 
        "It can't be right that our team loses, can it?", 
        "Surely our team can't lose, can it?", 
        "It cannot be that our team loses, can it?", 
        "Surely it is not possible for our team to lose, is it?", 
        "Surely our team cannot lose, can it?", 
        "It can't be that our team is losing, is it?"
      ], 
      "source_sentence": "Es kann doch nicht sein, dass unsere Mannschaft verliert, oder?"
    }, 
    {
      "category": "Function word", 
      "id": "00637004", 
      "langpair": "deen", 
      "negative_regex": "or\\?|did not it\\?", 
      "negative_tokens": [
        "That was a clear foul, isn't it?", 
        "That was a clear failure, wasn \u2019 t it?", 
        "That was a clear foul, is it?", 
        "That was a clear foul, was it?", 
        "That was a clear foul, right"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|wasn't it\\?", 
      "positive_tokens": [], 
      "source_sentence": "Das war ein klares Foul, oder?"
    }, 
    {
      "category": "Function word", 
      "id": "00637005", 
      "langpair": "deen", 
      "negative_regex": "or\\?", 
      "negative_tokens": [
        "You're gonna do it but not roughly lasagne, cooking or cooking?", 
        "You don't want to cook lasagne, don't you?", 
        "You don't want to cook lasagna, don't you?", 
        "You don't want to cook lasagna, do you"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|do you\\?", 
      "positive_tokens": [
        "You're not gonna cook lasagna, are you?"
      ], 
      "source_sentence": "Du willst doch nicht etwa Lasagne kochen, oder?"
    }, 
    {
      "category": "Function word", 
      "id": "00637006", 
      "langpair": "deen", 
      "negative_regex": "or\\?", 
      "negative_tokens": [
        "That's what you're waiting for, isn't it?", 
        "That was you, isn't it?", 
        "That was you, wasn \u2019 t it?", 
        "You were, didn't you?", 
        "That is you, do you?", 
        "Or were you?", 
        "That was you, right", 
        "That is what you are waiting for, or is it?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|wasn't it\\?", 
      "positive_tokens": [], 
      "source_sentence": "Das warst du, oder?"
    }, 
    {
      "category": "Function word", 
      "id": "00637007", 
      "langpair": "deen", 
      "negative_regex": "not (right|true)\\?|did not he\\?", 
      "negative_tokens": [
        "The burglar struck during the holiday, didn't it?", 
        "The burglary struck during the holiday, didn't it?", 
        "Has the burglar whacked during the holiday, not true?", 
        "The burglars hit during the holidays, isn't it?", 
        "The burglar slammed shut during the vacation, not?", 
        "The burglary was beaten during the holiday, is it?", 
        "The burglars struck during the holiday, didn't it?", 
        "The burglar struck while on holiday, didn't it?", 
        "The burglar fell asleep while on holiday, isn't it?", 
        "The burglar struck during the holiday, was it not?", 
        "The burglar has hit while on holiday, is it not?", 
        "The burglar struck during the holiday, right", 
        "President. - I call the Group of the European People's Party (Christian-Democratic Group).", 
        "The burglar has chosen during the holiday, not?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|didn't he\\?|did not he\\?", 
      "positive_tokens": [], 
      "source_sentence": "Der Einbrecher hat w\u00e4hrend des Urlaubs zugeschlagen, nicht wahr?"
    }, 
    {
      "category": "Function word", 
      "id": "00637008", 
      "langpair": "deen", 
      "negative_regex": "not (right|true)\\?|did not he\\?", 
      "negative_tokens": [
        "Martin was it who scored the goal, didn't it?", 
        "Martin was it that scored the goal, didn't it?", 
        "Martin was not true it, which shot the gate?", 
        "Martin was it who shot the gate, was it not?", 
        "It was Martin who shot the gate, didn't he?", 
        "It was Martin who scored the goal, wasn't he?", 
        "Martin was the one who scored the goal, didn't he?", 
        "Martin was it who scored the goal, didn't he?", 
        "It was Martin who shot the gate, wasn \u2019 t it?", 
        "Martin was the one who shot the gate, wasn't he?", 
        "It was Martin who scored the goal, right", 
        "President. - The next item is the joint debate on the following motions for resolutions:", 
        "Martin was not to be shot by the goal?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|wasn't it\\?", 
      "positive_tokens": [
        "Martin was the one who scored the goal, wasn't he?"
      ], 
      "source_sentence": "Martin war es, der das Tor geschossen hat, nicht wahr?"
    }, 
    {
      "category": "Function word", 
      "id": "00637009", 
      "langpair": "deen", 
      "negative_regex": "not (right|true)\\?|did not she\\?", 
      "negative_tokens": [
        "Mila bought this stuff, didn't it?", 
        "Mila has bought this stuff, isn't it?", 
        "Mila bought, not this things?", 
        "Mila has bought this stuff, is not it?", 
        "Mila bought this stuff, didn't he?", 
        "Mila shopping this stuff, isn't it?", 
        "Mila bought this stuff, didn 't she?", 
        "Mila bought this stuff, didn't she", 
        "MILA has bought this witness, is it not?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "right\\?|didn't she\\?|did not she\\?", 
      "positive_tokens": [], 
      "source_sentence": "Mila hat dieses Zeug eingekauft, nicht wahr?"
    }, 
    {
      "category": "Function word", 
      "id": "00637010", 
      "langpair": "deen", 
      "negative_regex": "not (right|true)\\?|did not you\\?", 
      "negative_tokens": [
        "You did eat from the buffet yesterday, didn't it?", 
        "You have eaten well yesterday at the Buffet, isn't it?", 
        "You nevertheless also yesterday from the Buffet ate, not?", 
        "After all, you had eaten the buffet yesterday, is it not?", 
        "You have also eaten the buffet yesterday, isn't it?", 
        "You ate the buffet yesterday, didn \u2019 t you?", 
        "You ate from the buffet yesterday, didn 't you?", 
        "You ate from the buffet yesterday, didn't you", 
        "Did you eat the buffet yesterday, did you not?", 
        "You have eaten yesterday from the buffet, not right?", 
        "You have eaten yesterday from the buffet, not right?"
      ], 
      "phenomenon": "Question tag", 
      "positive_regex": "", 
      "positive_tokens": [
        "You also ate from the buffet yesterday, didn't you?", 
        "You did eat from the buffet yesterday, didn't you?", 
        "You ate from the buffet yesterday too, didn't you?"
      ], 
      "source_sentence": "Ihr habt doch auch gestern vom Buffet gegessen, nicht wahr?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The man who had just left, who had come to ask a question.", 
        "The man left straight, who had come, in order to ask a question.", 
        "The man who had come to ask a question has just passed away.", 
        "The man just left, who came to ask a question.", 
        "The man just left, who had come to ask a question.", 
        "The man has just left, who had come to ask a question.", 
        "The man has just gone, who had come to ask a question.", 
        "The man has just gone away, who had come to ask a question.", 
        ""
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "just (left|walked away) who had come", 
      "positive_tokens": [
        "The man who had come to ask a question has just left.", 
        "The man who came to ask a question has just left.", 
        "The man who just came to ask a question has just left.", 
        "The man who came to ask a question has just departed.", 
        "The man who came to ask a question just left."
      ], 
      "source_sentence": "Der Mann ist gerade weggegangen, der gekommen war, um eine Frage zu stellen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Extraposition", 
      "positive_regex": "made to leave|leave the country (was|has been) made", 
      "positive_tokens": [
        "The decision has been taken to leave the country.", 
        "The decision was taken to leave the country."
      ], 
      "source_sentence": "Die Entscheidung wurde getroffen, das Land zu verlassen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653003", 
      "langpair": "deen", 
      "negative_regex": "man, who", 
      "negative_tokens": [
        "She did not like the man, who had so often written it letters."
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "man who had written", 
      "positive_tokens": [
        "She didn't like the man who wrote her letters so often.", 
        "She did not like the man who so often wrote letters to her.", 
        "She did not like the man who had so often written letters to her.", 
        "She didn't like the man who wrote her letters so many times.", 
        "She did not like the man who wrote her letters so many times.", 
        "She didn't like the man who wrote letters to her so many times."
      ], 
      "source_sentence": "Sie mochte den Mann nicht, der ihr so oft Briefe geschrieben hatte. "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653004", 
      "langpair": "deen", 
      "negative_regex": "people, who", 
      "negative_tokens": [
        "Lena cannot understand people, which do not drink wine."
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "people who do(n't| not) drink", 
      "positive_tokens": [], 
      "source_sentence": "Lena kann Leute nicht verstehen, die keinen Wein trinken."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653005", 
      "langpair": "deen", 
      "negative_regex": "book, that", 
      "negative_tokens": [
        "Tim cannot find the book, which he lent himself from Lisa."
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "the book (that )?he (has )?(borrowed|lent)", 
      "positive_tokens": [
        "Tim can't find the book he borrowed from Lisa.", 
        "Tim can not find the book he hired from Lisa.", 
        "Tim cannot find the book that he drew from Lisa."
      ], 
      "source_sentence": "Tim kann das Buch nicht finden, das er sich von Lisa ausgeliehen hat."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653006", 
      "langpair": "deen", 
      "negative_regex": "(movie|film), in", 
      "negative_tokens": [
        "Lisa does not want to see in which Tom Cruise plays along the film.", 
        "Lisa does not want to look the film, in Tom Cruise plays.", 
        "Lisa doesn't want to watch the film, which features Tom Cruise.", 
        "Lisa doesn't want to watch the movie Tom Cruise's play in.", 
        "Lisa does not want to watch the movie Tom Cruise is playing.", 
        "Lisa doesn't want to watch the film, which stars Tom Cruise.", 
        "Lisa doesn't want to watch the movie that Tom Cruise co-stars in.", 
        "Lisa doesn't want to watch the movie, which tom Cruise plays in.", 
        "Lisa doesn't want to watch the movie Tom Cruise is in."
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "the (movie|film) in which Tom Cruise", 
      "positive_tokens": [
        "Lisa doesn't want to watch the movie starring Tom Cruise.", 
        "Lisa doesn't want to watch the movie Tom Cruise plays in.", 
        "Lisa doesn't want to watch the movie Tom cruise is playing in.", 
        "Lisa doesn't want to watch the movie that Tom Cruise is in.", 
        "Lisa doesn't want to watch the movie Tom Cruise is playing in."
      ], 
      "source_sentence": "Lisa will den Film nicht gucken, in dem Tom Cruise mitspielt."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653007", 
      "langpair": "deen", 
      "negative_regex": "message( who)? we do(n't| not) know", 
      "negative_tokens": [
        "Someone didn't leave a message, we know.", 
        "Someone left a message, which we do not know.", 
        "Someone has left a message that we do not know.", 
        "Someone has left a message that we don't know.", 
        "Someone left a message that we do not know.", 
        "Someone left a message that we don't know."
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "somebody who we do(n't| not) know", 
      "positive_tokens": [], 
      "source_sentence": "Jemand hat eine Nachricht hinterlassen, den wir nicht kennen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Susan said somewhat more than once, which did not expect anybody.", 
        "Susan has said a little more than once that no one expected.", 
        "Susan said a little more than once that no one expected.", 
        "Susan has said just over once that no one expected.", 
        "Susan has said a little more than once that nobody expected.", 
        "Susan said a little more than once that nobody expected."
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "that nobody expected more than once|something more than once", 
      "positive_tokens": [], 
      "source_sentence": "Susan hat etwas mehr als einmal gesagt, das niemand erwartet hat."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Extraposition", 
      "positive_regex": "was here with red hair|guy with red hair", 
      "positive_tokens": [
        "There was some guy here with red hair.", 
        "Some red haired guy was here."
      ], 
      "source_sentence": "Irgendein Typ war hier mit roten Haaren."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00653010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "How frustrated they are with their children?", 
        "How frustrated are you with your children?"
      ], 
      "phenomenon": "Extraposition", 
      "positive_regex": "frustrated with their (children|kids)|are they with their (children|kids)", 
      "positive_tokens": [], 
      "source_sentence": "Wie frustriert sind sie mit ihren Kindern?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "both (personnel|staff|human) and technological|(personnel|staff) as well as technological", 
      "positive_tokens": [
        "The underlying process model integrates both personal and technological factors."
      ], 
      "source_sentence": "Das zu Grunde liegende Vorgehensmodell integriert sowohl personelle wie auch technologische Faktoren."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461002", 
      "langpair": "deen", 
      "negative_regex": "Majorca", 
      "negative_tokens": [
        "We either want to fly to Ibiza or Majorca.", 
        "We want to fly to Ibiza or Mallorca."
      ], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "either.*(to )?Ibiza or.*(to )?Mallorca", 
      "positive_tokens": [], 
      "source_sentence": "Wir wollen entweder nach Ibiza fliegen oder nach Mallorca."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "[Bb]oth.*M\u00fcller.*and.*Schmidt|M\u00fcller.*as well as.*Schmidt", 
      "positive_tokens": [
        "The concert will be attended by the M\u00fcller family and the Schmidt family."
      ], 
      "source_sentence": "Sowohl Familie M\u00fcller als auch Familie Schmidt besucht das Konzert."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I can't come visit you either today or tomorrow.", 
        "I cannot visit you today or tomorrow.", 
        "I can't come to see you today or tomorrow.", 
        "I can't come see you today or tomorrow.", 
        "I cannot come to visit you today or tomorrow.", 
        "I cannot visit you either today or tomorrow.", 
        "Neither today I can visit you."
      ], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "[Nn]either today nor tomorrow", 
      "positive_tokens": [], 
      "source_sentence": "Weder heute noch morgen kann ich dich besuchen kommen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "She goes shopping today or tomorrow.", 
        "She's going shopping today or tomorrow."
      ], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "either today or tomorrow", 
      "positive_tokens": [
        "She either goes shopping today or tomorrow."
      ], 
      "source_sentence": "Sie geht entweder heute oder morgen einkaufen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "It plays either in its old club, or he changes to a new."
      ], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "either.*his old club,? or", 
      "positive_tokens": [], 
      "source_sentence": "Er spielt entweder in seinem alten Verein, oder er wechselt zu einem neuen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "[Ee]ither you.*,? or I", 
      "positive_tokens": [], 
      "source_sentence": "Entweder du kommst zu mir, oder ich besuche dich."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461008", 
      "langpair": "deen", 
      "negative_regex": "either a red.*, or a green ", 
      "negative_tokens": [], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "either a red.* or a green", 
      "positive_tokens": [
        "I would like to have either a red or green shirt."
      ], 
      "source_sentence": "Ich h\u00e4tte gerne entweder ein rotes oder ein gr\u00fcnes Shirt."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461009", 
      "langpair": "deen", 
      "negative_regex": "either a (win|victory), or.*a draw", 
      "negative_tokens": [], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "either a (win|victory) or.*a (standoff|draw|tie)", 
      "positive_tokens": [
        "We either need a win or at least a draw.", 
        "We need either a victory or at least an opt-out.", 
        "We need either a victory or at least an indecision.", 
        "We either need a win or at least a tie.", 
        "We need either a victory or at least an undecided one.", 
        "We either need a victory or at least a draw.", 
        "We need either a victory or at least an undecided."
      ], 
      "source_sentence": "Wir brauchen entweder einen Sieg oder zumindest ein Unentschieden."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00461010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "You should go shopping right away or tonight.", 
        "You should either go shopping right now or tonight.", 
        "You should either go shopping immediately or tonight.", 
        "You should either go shopping immediately or in the evening.", 
        "or but tonight.", 
        "You should either go shopping immediately or this evening."
      ], 
      "phenomenon": "Multiple connectors", 
      "positive_regex": "go shopping either (right now|immediately) or", 
      "positive_tokens": [
        "You should either go grocery shopping right now or tonight.", 
        "You should buy either straight away or this evening.", 
        "You should go shopping now or tonight.", 
        "You should go shopping either right away or tonight."
      ], 
      "source_sentence": "Du solltest entweder sofort oder aber heute Abend einkaufen gehen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654001", 
      "langpair": "deen", 
      "negative_regex": "rats (that|which) (to catch|catching)|catch Hubert", 
      "negative_tokens": [
        "The rats, who had tried to catch Hubert unsuccessfully, hid themselves.", 
        "The rats who had tried to catch Hubert unsuccessfully hid.", 
        "The rats who had to catch hubert unsuccessfully, HID.", 
        "The rats Hubert had tried unsuccessfully to catch hid.", 
        "The rats Hubert tried unsuccessfully to catch were hiding."
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "rats,? (that|which) Hubert", 
      "positive_tokens": [
        "The rats Hubert had unsuccessfully tried to catch were hiding."
      ], 
      "source_sentence": "Die Ratten, die zu fangen Hubert erfolglos versucht hatte, versteckten sich."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Which good qualities do you think of?", 
        "Who are you thinking of?", 
        "Whose good qualities do you think?", 
        "In whose good qualities do you think?", 
        "Which good properties do you think of?", 
        "At whose good characteristics do you think?", 
        "Do you think about the good qualities?"
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "Whose good (qualities|properties|characteristics|features) (do you think|are you thinking) (of|about)", 
      "positive_tokens": [], 
      "source_sentence": "An wessen gute Eigenschaften denkst du?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The man Maria is kissing, loves you.", 
        "The man who is kissed by Maria loves her.", 
        "The Man Maria is kissed by, loves her.", 
        "The man Mary is kissed by loves her.", 
        "The man whom Mary is kissed by loves her.", 
        "The man by whom Mary is kissed loves her.", 
        "The man Mary is kissing loves her.", 
        "The man from whom Mary is cooked loves her.", 
        "The man Maria is kissed by loves her.", 
        "The man bought by Maria loves her.", 
        "The man from whom Maria is cooked loves them.", 
        "The man who kissed Maria loves her."
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "who (kisses|is kissing) Mar(y|ia) loves her", 
      "positive_tokens": [
        "The man who kissed Mary loves her."
      ], 
      "source_sentence": "Der Mann, von dem Maria gek\u00fcsst wird, liebt sie."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The chair on which Karl sits, is blue.", 
        "The chair, sitting on the Karl, is blue."
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "chair (that |(on )?which )?(Karl|Charles) (sits|is sitting) (on )?is blue", 
      "positive_tokens": [
        "The Chair Karl is sitting on is blue.", 
        "The chair where Karl sits is blue."
      ], 
      "source_sentence": "Der Stuhl, auf dem Karl sitzt, ist blau."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "How quickly did he drive?", 
        "How quickly did he go?"
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "How fast", 
      "positive_tokens": [], 
      "source_sentence": "Wie schnell gefahren ist er?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654006", 
      "langpair": "deen", 
      "negative_regex": "Karl to eat (had tried|was trying)", 
      "negative_tokens": [
        "On the bottom of the biscuit, trying to eat Karl had.", 
        "On the ground was the cookie that Karl tried to eat.", 
        "On the ground the Kek, who had tried to eat Karl."
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "Karl (had tried|was trying) to eat", 
      "positive_tokens": [
        "On the floor was the biscuit Charles had tried to eat.", 
        "The cookie Karl tried to eat was lying on the floor."
      ], 
      "source_sentence": "Auf dem Boden lag der Keks, den zu essen Karl versucht hatte."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Who are we all familiar with the proposals on this issue?", 
        "What proposals do we all know on this subject?", 
        "Do we know all the proposals on this issue?"
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "Whose (proposals|suggestions)", 
      "positive_tokens": [], 
      "source_sentence": "Wessen Vorschl\u00e4ge zu diesem Thema kennen wir alle?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654008", 
      "langpair": "deen", 
      "negative_regex": "to consider Lisa (forgot|has forgotten)", 
      "negative_tokens": [
        "That was a circumstance to be kept in mind Lisa forgot.", 
        "This was a fact that Lisa forgot to be considered.", 
        "That was a fact to take into account Lisa forgot.", 
        "This was a circumstance that forgot to consider Lisa.", 
        "This was a fact to be taken into account in Lisa.", 
        "This was a circumstance that forgot to take into account Lisa.", 
        "This was a circumstance to take into account Lisa."
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "Lisa (forgot|has forgotten) to (consider|take into account)", 
      "positive_tokens": [], 
      "source_sentence": "Das war ein Umstand, den zu ber\u00fccksichtigen Lisa verga\u00df."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654009", 
      "langpair": "deen", 
      "negative_regex": "to read he had planned", 
      "negative_tokens": [], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "he had planned to read", 
      "positive_tokens": [
        "The book he planned to read was still with Lena.", 
        "The book that he was planning to read was still with Lena."
      ], 
      "source_sentence": "Das Buch, das zu lesen er geplant hatte, war noch bei Lena."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00654010", 
      "langpair": "deen", 
      "negative_regex": "the button to (press|push)", 
      "negative_tokens": [
        "Yvonne had to press unsuccessfully tried the knob."
      ], 
      "phenomenon": "Pied-piping", 
      "positive_regex": "(unsuccessfully tried|tried unsuccessfully) to (press|push)", 
      "positive_tokens": [
        "Yvonne tried to press the button without success.", 
        "Yvonne had tried to press the button unsuccessfully.", 
        "Yvonne had tried to push the button unsuccessfully."
      ], 
      "source_sentence": "Yvonne hatte erfolglos den Knopf zu dr\u00fccken versucht."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Have you already read the book"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "Have you.*read the book\\?|Did you.*read the book\\?|(Did|Have) you read the book yet\\?", 
      "positive_tokens": [
        "Have you read the book already?"
      ], 
      "source_sentence": "Hast du das Buch schon gelesen?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Will he have children?", 
        "Does he want children"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "Does he want.*\\?", 
      "positive_tokens": [
        "Does it want to have children?"
      ], 
      "source_sentence": "Will er Kinder haben?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Can we do that"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "[Cc]an we (do|manage|handle).*\\?", 
      "positive_tokens": [
        "Can we create that?", 
        "Can we make it?", 
        "Can we make that happen?", 
        "Can we make this?", 
        "Can we get this done?", 
        "Can we achieve that?", 
        "Can we achieve this?"
      ], 
      "source_sentence": "K\u00f6nnen wir das schaffen?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Have the children do their homework?", 
        "Have the children done their homework", 
        "Do the children have done their homework?"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "(Did the (children|kids) do|Have the (children|kids) done).*\\?", 
      "positive_tokens": [
        "Did the children make their homework?", 
        "Have children done their homework?", 
        "Have the Children done their homework?", 
        "Have the children made their homework?"
      ], 
      "source_sentence": "Haben die Kinder ihre Hausaufgaben gemacht?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Do you think these flowers are beautiful", 
        "Do you want these flowers beautiful?"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "Do you (like|think).*\\?", 
      "positive_tokens": [
        "Do you find these flowers beautiful?", 
        "Do you love these flowers?"
      ], 
      "source_sentence": "Findest du diese Blumen sch\u00f6n?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Should we go home"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "(Shall|Should) we go.*\\?", 
      "positive_tokens": [
        "Are we supposed to go home?"
      ], 
      "source_sentence": "Sollen wir nach Hause gehen?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Want to have a cup of coffee?", 
        "Want to have a cup of coffee"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "Would you like.*\\?|Do you want.*\\?|Can I get you.*\\?", 
      "positive_tokens": [
        "Looking for a cup of coffee?"
      ], 
      "source_sentence": "M\u00f6chten Sie eine Tasse Kaffee haben?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tim and Lena already know each other?", 
        "Tim and Lena know each other yet?", 
        "Do Tim and Lena already know each other", 
        "Do you know Tim and Lena?"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "Do Tim and Lena.* know.*\\?", 
      "positive_tokens": [
        "Have Tim and Lena met before?", 
        "Do Tim and lena know each other already?", 
        "Did Tim and Lena know each other?", 
        "Have Tim and Lena met yet?"
      ], 
      "source_sentence": "Kennen Tim und Lena sich schon?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "You are familiar with the data?", 
        "Are you familiar with the data"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "Are you.*\\?", 
      "positive_tokens": [], 
      "source_sentence": "Sind Sie mit den Daten vertraut?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00484010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Has it opened?", 
        "Did he open the window", 
        "Does he open the window?"
      ], 
      "phenomenon": "Polar question", 
      "positive_regex": "(Did he open|Has he opened).*\\?", 
      "positive_tokens": [
        "Did it open the window?", 
        "Has it opened the window?"
      ], 
      "source_sentence": "Hat er das Fenster ge\u00f6ffnet?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Topicalization", 
      "positive_regex": "Because the pressure was too.*, he (refused|denied) (an|to) answer", 
      "positive_tokens": [
        "Because the pressure was too large, it refused an answer."
      ], 
      "source_sentence": "Weil der Druck zu gro\u00df war, verweigerte er eine Antwort. "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Topicalization", 
      "positive_regex": "I( will not| won't|('m| am) not going to) eat (this|that) pizza\\.", 
      "positive_tokens": [
        "I'm not gonna eat that pizza.", 
        "I'm not gonna eat that Pizza.", 
        "I will not eat this Pizza."
      ], 
      "source_sentence": "Diese Pizza werde ich nicht essen."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "On the presidents one hears.", 
        "To the president is heard.", 
        "The President was consulted.", 
        "The president is listened to.", 
        "The president is heard.", 
        "On the president is heard.", 
        "The President is heard.", 
        "The President will be heard.", 
        "The President is listened to.", 
        "Listening to the President.", 
        "The President shall be heard.", 
        "It is part of the President."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "The President is being listened to.", 
        "The president is being listened to.", 
        "The president is being heard."
      ], 
      "source_sentence": "Auf den Pr\u00e4sidenten wird geh\u00f6rt."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "About the president is shunned.", 
        "The President is being raped.", 
        "About the president being shamed.", 
        "Over the presidents one grumbles.", 
        "Scolding about the president.", 
        "The president is being railed against.", 
        "The president is being scolded.", 
        "The president will be punished.", 
        "About the president is slammed.", 
        "There is scathing about the president.", 
        "The president is being shouted at.", 
        "The president is being abused.", 
        "There is ranting about the president.", 
        "There is a ranting about the president.", 
        "The president is scolded.", 
        "The president is being slammed.", 
        "The president is being scolded.", 
        "The president is being chastised.", 
        "The President is being choked.", 
        "The president is being vaccinated.", 
        "There is scolding about the president.", 
        "The president is shouted at.", 
        "The President is being sentenced.", 
        "The President is being vaccinated.", 
        "The president is being shamed.", 
        "The President is vaccinated.", 
        "The president is being scolled."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "The president is being insulted.", 
        "The President is being scolded."
      ], 
      "source_sentence": "\u00dcber den Pr\u00e4sidenten wird geschimpft."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The president is being argued.", 
        "With the president one argues.", 
        "The president is arguing.", 
        "With the president being stripped.", 
        "With The President is arguing.", 
        "With the President is in a fight.", 
        "There is controversy with the president.", 
        "The President was disputed.", 
        "There are disputes with the President.", 
        "Arguing with the president.", 
        "The President is being challenged.", 
        "The President has argued.", 
        "The President is arguing.", 
        "The President is denied."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "There is a dispute with the President.", 
        "There is a dispute with the president.", 
        "There is a debate with the President.", 
        "There's a fight with the president.", 
        "There is an argument with the president."
      ], 
      "source_sentence": "Mit dem Pr\u00e4sidenten wird gestritten."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Between the tests is chosen.", 
        "Selected between tests.", 
        "Between the tests one selects.", 
        "Between the tests will be chosen.", 
        "Between tests is chosen.", 
        "There is a choice between the tests.", 
        "Between the Tests is selected.", 
        "The tests are selected between the tests.", 
        "You choose between tests.", 
        "You can choose between the tests.", 
        "Choosing between tests.", 
        "Between the Tests, is chosen.", 
        "You choose between the tests.", 
        "Choose between the tests.", 
        "The tests are chosen.", 
        "The choice is between the tests.", 
        "Between the tests is selected.", 
        "The selection is made between the tests."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "A choice is made between the tests.", 
        "The choice is made between the tests."
      ], 
      "source_sentence": "Zwischen den Tests wird gew\u00e4hlt."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The President will vote.", 
        "The President is voting.", 
        "For the president is correct.", 
        "Vote for the president.", 
        "Vote for the President.", 
        "For the president, voted.", 
        "We shall vote in favour of the President.", 
        "Votes are cast for the President.", 
        "The president is voted on.", 
        "Voting for the president.", 
        "The President will be voted for.", 
        "The President is voted in favour of it.", 
        "The president was put to the vote.", 
        "There is a vote for the president.", 
        "Voting will be for the president.", 
        "The president is voted for.", 
        "The President will be voted in favour.", 
        "The President is voted in favour.", 
        "The President will be elected.", 
        "Voting for the President is being held.", 
        "The President is voted.", 
        "The president shall be elected.", 
        "The President shall be voted in favour.", 
        "We shall vote for the President.", 
        "The President is voted for.", 
        "The vote is in favour of the President.", 
        "It is voted for the President."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "For the president will be voted.", 
        "For the president is voted."
      ], 
      "source_sentence": "F\u00fcr den Pr\u00e4sidenten wird gestimmt."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Against the president is correct.", 
        "Vote against the president.", 
        "The President is voting against.", 
        "The President will be voted against.", 
        "The president is voted on.", 
        "The president will be voted against.", 
        "The president was put to the vote.", 
        "There is a vote against the president.", 
        "The President is being voted against.", 
        "The president is voted against.", 
        "The president is being voted against.", 
        "The President is voted against.", 
        "The vote against the President is being held.", 
        "Voting against the president.", 
        "The President shall be voted against.", 
        "The vote will be taken against the President.", 
        "The President will vote in favour.", 
        "The vote is taken against the President."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "Against The President will be voted.", 
        "Against the president is voted."
      ], 
      "source_sentence": "Gegen den Pr\u00e4sidenten wird gestimmt."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The wine she brought her grandmother.", 
        "The wine brought her to her grandmother.", 
        "She brought her to her grandmother."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "She brought the wine to her grandmother"
      ], 
      "source_sentence": "Den Wein brachte sie ihrer Gro\u00dfmutter."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00464010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "His decision has been known for a long time.", 
        "His decision has been a good thing for a long time.", 
        "His decision has long been a certainty.", 
        "The decision has been long overdue.", 
        "His decision has been a long time coming.", 
        "His decision is certain for a long time.", 
        "Its decision has been firm for a long time.", 
        "It has been a decision for a long time.", 
        "His decision is already long."
      ], 
      "phenomenon": "Topicalization", 
      "positive_regex": "", 
      "positive_tokens": [
        "His decision has been clear for a long time.", 
        "His decision has been firm for a long time.", 
        "His decision has long been firm.", 
        "His decision has been fixed for a long time.", 
        "His decision has been certain for a long time.", 
        "His decision has been made for a long time.", 
        "His decision has long been clear.", 
        "His decision has long been made."
      ], 
      "source_sentence": "Fest steht sein Entschluss schon lange."
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "When does the manager sleep"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "When does.*sleep\\?|When is.*sleeping\\?", 
      "positive_tokens": [
        "When's the manager sleeping?"
      ], 
      "source_sentence": "Wann schl\u00e4ft der Manager?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "When did Karl met a friend at the station?", 
        "When did Karl meet a friend at the station", 
        "When did Karl take a friend at the station?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "When did.*meet.*\\?|When has.*met.*\\?|When was.*meeting.*\\?", 
      "positive_tokens": [], 
      "source_sentence": "Wann hat Karl am Bahnhof einen Freund getroffen? "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Where did Karl meet a friend yesterday"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Where did.*meet.*\\?|Where has.*met.*\\?|Where was.*meeting.*\\?", 
      "positive_tokens": [
        "Where did Karl hit a friend yesterday?"
      ], 
      "source_sentence": "Wo hat Karl gestern einen Freund getroffen? "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What is true"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "What('s| is).*\\?", 
      "positive_tokens": [], 
      "source_sentence": "Was stimmt?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540005", 
      "langpair": "deen", 
      "negative_regex": "[Ww]hom", 
      "negative_tokens": [
        "Who did Karl meet at the station yesterday", 
        "Who was hit by Karl yesterday at the station?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Who did.*meet.*\\?|Who has.*met.*\\?|Who was.*meeting.*\\?", 
      "positive_tokens": [
        "Who did Karl hit at the station yesterday?", 
        "Who met Karl at the train station yesterday?", 
        "Who met Karl at the station yesterday?", 
        "Who met Karl yesterday at the station?"
      ], 
      "source_sentence": "Wen hat Karl gestern am Bahnhof getroffen? "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Whose car Karl bought?", 
        "Whose did car buy Karl?", 
        "What car did Karl buy?", 
        "Which car did Karl buy?", 
        "Whose car did Karl Buy?", 
        "Who bought Karl?", 
        " Whose car bought Karl?", 
        "Whose car did Karl buy", 
        "Who car has bought Karl?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Whose.*did.*buy\\?|Whose.*has.*bought\\?|Whose.*was.*buying\\?", 
      "positive_tokens": [], 
      "source_sentence": "Wessen Auto hat Karl gekauft? "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540007", 
      "langpair": "deen", 
      "negative_regex": "[Ww]hom|bought\\?", 
      "negative_tokens": [
        "Who bought something?", 
        "Who bought what"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Who ((has )?bought|did buy) what\\?", 
      "positive_tokens": [], 
      "source_sentence": "Wer hat was gekauft? "
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Why is the tourist doing three photos?", 
        "Why does the tourist take three photos", 
        "Why is the tourist making three photographs?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Why (does.*take|is.*taking).*\\?", 
      "positive_tokens": [
        "Why does the tourist make three photos?"
      ], 
      "source_sentence": "Warum macht der Tourist drei Fotos?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Why did Carl Schurz leave his country?", 
        "Why did Carl Schurz have to leave his country", 
        "Why had Carl Shurz left his country?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Why (did.*have|was.*forced) to leave.*\\?", 
      "positive_tokens": [], 
      "source_sentence": "Warum musste Carl Schurz sein Land verlassen?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Why did Murdoc have to work overtime"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Why (did.*have|was.*forced) to (work|do).*\\?", 
      "positive_tokens": [
        "Why did Murdoc have to make overtime?", 
        "Why did Murdoc have to overtime?", 
        "Why did Murdoc had to take overtime?"
      ], 
      "source_sentence": "Warum musste Murdoc \u00dcberstunden machen?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540011", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What will be held in Belarus in 2014?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "(will|is going to) (happen|take place)", 
      "positive_tokens": [
        "What is taking place in Belarus in 2014?", 
        "What is happening in Belarus in 2014?", 
        "What takes place in Belarus in 2014?"
      ], 
      "source_sentence": "Was findet 2014 in Wei\u00dfrussland statt?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540012", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What does Heike do in your spare time?", 
        "What do you want to do in your spare time?", 
        "What do Heike like to do in her free time?", 
        "What does Heike like to do in her spare time", 
        "What do Heike like to do in their leisure time?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "What does.*like to do.*\\?", 
      "positive_tokens": [
        "What does Heike like in her free time?", 
        "What does Heike enjoy doing in her free time?"
      ], 
      "source_sentence": "Was macht Heike gern in ihrer Freizeit?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540013", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What is Iceland doing at the book fair?", 
        "What Island at the book fair?", 
        "What does Iceland introduce to the book fair?", 
        "What is Iceland presenting at the book fair", 
        "What will Iceland be presenting at the Book Fair?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "What (does.*present.*|is.*presenting.*)\\?", 
      "positive_tokens": [
        "What does Iceland introduce at the Book Fair?", 
        "What will Iceland present at the book fair?", 
        "What will Iceland present at the Book Fair?"
      ], 
      "source_sentence": "Was stellt Island auf der Buchmesse vor?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540014", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What Bernd's was first order in New York?", 
        "What was Bernard's first assignment in New York"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "What was.*\\?", 
      "positive_tokens": [], 
      "source_sentence": "Was war Bernds erster Auftrag in New York?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540015", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What will be presented in Berlin today"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "What (will|(i|')s going to) be presented.*\\?", 
      "positive_tokens": [
        "What is being presented today in Berlin?", 
        "What is introduced today in Berlin?", 
        "What is being presented in Berlin today?", 
        "What is presented today in Berlin?"
      ], 
      "source_sentence": "Was wird heute in Berlin vorgestellt?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540016", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What did all the boys want"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "What did.*want\\?", 
      "positive_tokens": [], 
      "source_sentence": "Was wollten alle Jungen?"
    }, 
    {
      "category": "LDD & interrogatives", 
      "id": "00540017", 
      "langpair": "deen", 
      "negative_regex": "[Ww]hom", 
      "negative_tokens": [
        "Who is the woman blamed for?", 
        "Who is the woman to blame?", 
        "Who is the woman blaming", 
        "Who is the woman responsible for?"
      ], 
      "phenomenon": "Wh-movement", 
      "positive_regex": "Who (blames.*|is the woman blaming)\\?", 
      "positive_tokens": [
        "Who does the woman blame?", 
        "Who gives the woman the blame?", 
        "Who's the woman blaming?"
      ], 
      "source_sentence": "Wem gibt die Frau die Schuld?"
    }, 
    {
      "category": "MWE", 
      "id": "00467001", 
      "langpair": "deen", 
      "negative_regex": "pour.*flowers", 
      "negative_tokens": [
        "Millie has forgotten the flowers to Wollongong.", 
        "Lena has forgotten to throw the flowers."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "water.*flowers?", 
      "positive_tokens": [], 
      "source_sentence": "Lena hat vergessen, die Blumen zu gie\u00dfen."
    }, 
    {
      "category": "MWE", 
      "id": "00467002", 
      "langpair": "deen", 
      "negative_regex": "cook.*coffee", 
      "negative_tokens": [], 
      "phenomenon": "Collocation", 
      "positive_regex": "(make|brew).*coffee", 
      "positive_tokens": [], 
      "source_sentence": "Der neue Praktikant muss immer Kaffee kochen."
    }, 
    {
      "category": "MWE", 
      "id": "00467003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lena runs, because she must get the course.", 
        "Lena is riding because she has to walk the train."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "catch.*train", 
      "positive_tokens": [], 
      "source_sentence": "Lena rennt, weil sie den Zug erwischen muss."
    }, 
    {
      "category": "MWE", 
      "id": "00467004", 
      "langpair": "deen", 
      "negative_regex": "flush", 
      "negative_tokens": [
        "Callum is angry because Tess has forgotten splashing the crockery.", 
        "Tim is furious, because Lisa forgot to rinse the table-ware.", 
        "Tim is angry because Lisa forget the pudding.", 
        "TIM is angry because Lisa has forgotten to rinse the crockery.", 
        "Tim is angry because Lisa forgot to spill the dishes.", 
        "Tim is angry because Lisa forgot to rinse the crockery.", 
        "Tim is angry because Lisa forgot to wash the harness."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "wash.*up|do.*washing-up|wash.*up the crockery|(do.*|wash.*)dishes|rinse.*dishes", 
      "positive_tokens": [
        "Tim is angry because Lisa has forgotten to rinse the dish.", 
        "Tim is angry because Lisa has forgotten to rush the crockery.", 
        "Tim is furious because Lisa forgot to rinse the crockery."
      ], 
      "source_sentence": "Tim ist w\u00fctend, weil Lisa vergessen hat, das Geschirr zu sp\u00fclen.\n"
    }, 
    {
      "category": "MWE", 
      "id": "00467005", 
      "langpair": "deen", 
      "negative_regex": "(lovely|adorable) wine", 
      "negative_tokens": [
        "Kip happily smokes lieblichen wine.", 
        "Simon drinks favourite wine.", 
        "Simon cup at all loving wine.", 
        "Simon prefers to drink pleasant wine.", 
        "Simon is most likely to drink love wine.", 
        "Simon drink preferably charming wine."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "sweet wine", 
      "positive_tokens": [], 
      "source_sentence": "Simon trinkt am liebsten lieblichen Wein."
    }, 
    {
      "category": "MWE", 
      "id": "00467006", 
      "langpair": "deen", 
      "negative_regex": "drive.*sport", 
      "negative_tokens": [
        "Larry regularly sports.", 
        "Larry regularly drives sports.", 
        "Larry regularly pushes sport.", 
        "Larry drives Sport on a regular basis.", 
        "Larry plays sports regularly.", 
        "Larry regularly plays sport.", 
        "Larry regularly connected sport.", 
        "Larry is a regular sportsman.", 
        "Larry regularly sports.", 
        "Larry is regularly involved in sports.", 
        "Larry sports regularly.", 
        " Larry regularly practises sports.", 
        "Larry regularly runs sport."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "(do.*sports?)|((engag.*|go.*)sports)|(work.*out)|exercises", 
      "positive_tokens": [], 
      "source_sentence": "Larry treibt regelm\u00e4\u00dfig Sport."
    }, 
    {
      "category": "MWE", 
      "id": "00467007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Collocation", 
      "positive_regex": "(is taking|takes).* seriously", 
      "positive_tokens": [], 
      "source_sentence": "Der Manager nimmt den Pr\u00e4sidenten ernst."
    }, 
    {
      "category": "MWE", 
      "id": "00467008", 
      "langpair": "deen", 
      "negative_regex": "agree", 
      "negative_tokens": [
        "The election's Callum sad.", 
        "The election result is sad for Tim.", 
        "The election result tunes Tim sadly.", 
        "The election result is sad to Tim.", 
        "The election misses Tim sad.", 
        "The election result is sad to tell Tim.", 
        "The election result is true to Tim.", 
        "The election result is sadly true of Tim.", 
        "The result of the election is sad for Tim.", 
        "The election results are sad.", 
        "The election result is true Tim sad.", 
        "The result of Tim's vote is sad.", 
        "The result of the elections is sad.", 
        "The election result is sad."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "sadden|(is making|makes).* sad", 
      "positive_tokens": [
        "Tim is sad about the election result."
      ], 
      "source_sentence": "Das Wahlergebnis stimmt Tim traurig. \n"
    }, 
    {
      "category": "MWE", 
      "id": "00467009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The treasure was hidden on a secluded island.", 
        "The treasure was hidden on a single island."
      ], 
      "phenomenon": "Collocation", 
      "positive_regex": "(deserted|desert|remote|lonely) island", 
      "positive_tokens": [], 
      "source_sentence": "Der Schatz war auf einer einsamen Insel versteckt.\n"
    }, 
    {
      "category": "MWE", 
      "id": "00467010", 
      "langpair": "deen", 
      "negative_regex": "picked|chose|voted|elected|selected", 
      "negative_tokens": [], 
      "phenomenon": "Collocation", 
      "positive_regex": "dial?led|was diall?ing", 
      "positive_tokens": [], 
      "source_sentence": "Tim w\u00e4hlte Lenas Telefonnummer. "
    }, 
    {
      "category": "Composition", 
      "id": "00651001", 
      "langpair": "deen", 
      "negative_regex": "policecar|copcar", 
      "negative_tokens": [
        "The child showed off the Cruiser.", 
        "The child showed the police utility."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "(police|cop) car", 
      "positive_tokens": [], 
      "source_sentence": "Das Kind zeigte auf das Polizeiauto."
    }, 
    {
      "category": "Composition", 
      "id": "00651002", 
      "langpair": "deen", 
      "negative_regex": "table-?leg", 
      "negative_tokens": [
        "He stood furiously against the table.", 
        "He stepped angry against the Tischbein.", 
        "He was angry against the tischbein.", 
        "He stood angrily against the leg of the table.", 
        "He was angry at the leg of the table.", 
        "He was angry at the table."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "table leg", 
      "positive_tokens": [
        "He was furious at the leg of the table.", 
        "He kicked angrily against the leg of the table."
      ], 
      "source_sentence": "Er trat w\u00fctend gegen das Tischbein."
    }, 
    {
      "category": "Composition", 
      "id": "00651003", 
      "langpair": "deen", 
      "negative_regex": "(wash |wash|laundry)day", 
      "negative_tokens": [
        "Wednesday is with us Waschtag.", 
        "Wednesday is a day of washing with us.", 
        "We have a laundry on Wednesdays.", 
        "Wednesdays are in our shop.", 
        "Wednesday is our day of washing.", 
        "We have a day of washing on Wednesday.", 
        "Wednesdays are laundering day with us.", 
        "Wednesday\u2019s Waschtag is with us."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "(wash(ing )|laundry )day", 
      "positive_tokens": [
        "Wednesday is our Washday."
      ], 
      "source_sentence": "Mittwochs ist bei uns Waschtag."
    }, 
    {
      "category": "Composition", 
      "id": "00651004", 
      "langpair": "deen", 
      "negative_regex": "Eastertrip", 
      "negative_tokens": [
        "Next week, make our Osterreise after France.", 
        "Next week we will take our Austria to France.", 
        "Next week we are going our eastward journey to France.", 
        "Next week we make our east trip to France."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "Easter (trip|journey)", 
      "positive_tokens": [
        "Next week make we our Easter travel to France."
      ], 
      "source_sentence": "N\u00e4chste Woche machen wir unsere Osterreise nach Frankreich. "
    }, 
    {
      "category": "Composition", 
      "id": "00651005", 
      "langpair": "deen", 
      "negative_regex": "rice(cake| ?waffle)s?", 
      "negative_tokens": [
        "My sister loves Reiswaffeln.", 
        "My sister loves waffles rice.", 
        "My sister loves rice bullets.", 
        "My sister loves Rice waffles.", 
        "My sister loves rice weapons.", 
        "My sister loves rice wine.", 
        "My sister loves rice guns."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "rice (cakes?|wafers?)", 
      "positive_tokens": [], 
      "source_sentence": "Meine Schwester liebt Reiswaffeln."
    }, 
    {
      "category": "Composition", 
      "id": "00651006", 
      "langpair": "deen", 
      "negative_regex": "birthday(gift|present)", 
      "negative_tokens": [
        "Tess brings the gift for Callum."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "birthday (gift|present)", 
      "positive_tokens": [], 
      "source_sentence": "Lisa bringt das Geburtstagsgeschenk f\u00fcr Tim mit."
    }, 
    {
      "category": "Composition", 
      "id": "00651007", 
      "langpair": "deen", 
      "negative_regex": "thunderstorms", 
      "negative_tokens": [
        "Yesterday, black thunderstorms drew up.", 
        "Yesterday, black thunderstorms swept up.", 
        "Yesterday, black thunderstorms pulled up.", 
        "Yesterday there were black clouds of thunderstorms.", 
        "Yesterday, black-collar clouds raised.", 
        "Yesterday, black clouds pulled up.", 
        "Black storm clouds came up yesterday.", 
        "Yesterday, black clouds picked up."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "[Tt]hunderclouds|[Tt]hunderstorm clouds|[Bb]lack storm clouds", 
      "positive_tokens": [], 
      "source_sentence": "Gestern zogen schwarze Gewitterwolken auf."
    }, 
    {
      "category": "Composition", 
      "id": "00651008", 
      "langpair": "deen", 
      "negative_regex": "[Cc]hristmas( ?eve| ?evening| night)", 
      "negative_tokens": [
        "On Weihnachtsabend, everyone on the decked tree and the gifts."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "Christmas Eve(ning)?", 
      "positive_tokens": [], 
      "source_sentence": "Am Weihnachtsabend freuen sich alle auf den geschm\u00fcckten Baum und die Geschenke."
    }, 
    {
      "category": "Composition", 
      "id": "00651009", 
      "langpair": "deen", 
      "negative_regex": "fishdish", 
      "negative_tokens": [
        "At the restaurant she ordered a fish court.", 
        "She ordered a fish court in the restaurant."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "fish dish", 
      "positive_tokens": [], 
      "source_sentence": "Im Restaurant bestellte sie ein Fischgericht."
    }, 
    {
      "category": "Composition", 
      "id": "00651010", 
      "langpair": "deen", 
      "negative_regex": "corncrop|(corn|grain)harvest", 
      "negative_tokens": [
        "The children help the farmers every year during the Getreideernte.", 
        "The children help farmers every year in the crop harvest.", 
        "The children help the farmers every year at the cereal.", 
        "The children help the farmer harvest every year."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "corn crop|harvesting of cereals|(corn|grain|cereal) harvest|to harvest the grain", 
      "positive_tokens": [
        "The children help the farmer to harvest crops every year.", 
        "Every year, children help farmers to harvest cereals.", 
        "The children help farmers harvest grain every year.", 
        "The children help farmers harvest cereals every year.", 
        "The children help the farmer harvest cereals every year.", 
        "The children help the farmer to harvest grain every year.", 
        "The children help the farmer harvest grain every year.", 
        "Children help farmers harvest grain every year.", 
        "The children help farmers to harvest cereals every year.", 
        "The children help farmers harvest the grain every year."
      ], 
      "source_sentence": "Die Kinder helfen dem Bauern jedes Jahr bei der Getreideernte."
    }, 
    {
      "category": "Composition", 
      "id": "00651011", 
      "langpair": "deen", 
      "negative_regex": "((concessions?|snack)stand)|((food|snack)stall)", 
      "negative_tokens": [
        "He was hungry and decided to eat a snack.", 
        "He was hungry and decided to grab a bite to eat.", 
        "It had hunger and decided to eat at the lunch conditions a little thing.", 
        "He was hungry and decided to eat a little something at the lufthavn.", 
        "He was hungry and decided to eat a little bit at the bar.", 
        "He was hungry and decided to eat a little at the Imbassstand.", 
        "He had hunger and decided to eat a little bit at the snack."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "((concessions?|snack|food) (stand|booth|kiosk|bar))|((food|snack) (booth|stall|stand|bar))", 
      "positive_tokens": [], 
      "source_sentence": "Er hatte Hunger und entschloss sich, am Imbissstand eine Kleinigkeit zu essen."
    }, 
    {
      "category": "Composition", 
      "id": "00651012", 
      "langpair": "deen", 
      "negative_regex": "coffee(cup|mug)", 
      "negative_tokens": [
        "She has a Cup of a pink coffee.", 
        "She has a pinch coffee pot.", 
        "She has a pinch of coffee."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "coffee (cup|mug)", 
      "positive_tokens": [
        "It has a pinke cup of coffee."
      ], 
      "source_sentence": "Sie hat eine pinke Kaffeetasse."
    }, 
    {
      "category": "Composition", 
      "id": "00651013", 
      "langpair": "deen", 
      "negative_regex": "soapbubble", 
      "negative_tokens": [
        "His dream burst like a bubble.", 
        "His dream burst like a Seifenblase."
      ], 
      "phenomenon": "Compound", 
      "positive_regex": "(soap bubble|bubble of soap)", 
      "positive_tokens": [], 
      "source_sentence": "Sein Traum platzte wie eine Seifenblase."
    }, 
    {
      "category": "Composition", 
      "id": "00651014", 
      "langpair": "deen", 
      "negative_regex": "(football|soccer)(match|game)", 
      "negative_tokens": [], 
      "phenomenon": "Compound", 
      "positive_regex": "(football|soccer) (match|game)", 
      "positive_tokens": [], 
      "source_sentence": "Hast du das Fu\u00dfballspiel gestern gesehen?"
    }, 
    {
      "category": "MWE", 
      "id": "00160001", 
      "langpair": "deen", 
      "negative_regex": "(put|sat|set).*in the sand", 
      "negative_tokens": [
        "Lena has thrown her final exam into the sand.", 
        "Lena has set itself the final examination in the Sand.", 
        "Lena set its final examination into the sand.", 
        "Lena has their exam in the sand process.", 
        "Lena put her final exam in the Sand.", 
        "Lena slammed her final exam into the sand.", 
        "Lena has squandered her final exam.", 
        "Lena has her final exam in the sand.", 
        "Lena has thrown her final exam into the Sand.", 
        "Lena has set her final examination in sand."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "(messed|screwed|cocked|mucked) up ", 
      "positive_tokens": [
        "Lena failed her final exam."
      ], 
      "source_sentence": "Lena hat ihre Abschlusspr\u00fcfung in den Sand gesetzt."
    }, 
    {
      "category": "MWE", 
      "id": "00160002", 
      "langpair": "deen", 
      "negative_regex": "bit(e|ing).*( sour| acid)? apple", 
      "negative_tokens": [
        "The workers must choke in the acidic nut.", 
        "The workers would have to bite into the bullet.", 
        "The workers would have to bite into the sour cider.", 
        "The workers had to walk in the acid apple."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "bit(e|ing) the bullet|swallow(ing)? the( bitter)? pill|grasp(ing?) the nettle|grin and bear", 
      "positive_tokens": [], 
      "source_sentence": "Die Arbeiter m\u00fcssten in den sauren Apfel bei\u00dfen."
    }, 
    {
      "category": "MWE", 
      "id": "00160003", 
      "langpair": "deen", 
      "negative_regex": "sparrow.*hand.*dove.*roof|sparrow|dove|roof", 
      "negative_tokens": [
        "Prefer the Spatz in Hand than the Dove on the Roof."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "A bird in the hand is worth (two|2) in the bush", 
      "positive_tokens": [], 
      "source_sentence": "Lieber den Spatz in der Hand als die Taube auf dem Dach."
    }, 
    {
      "category": "MWE", 
      "id": "00160004", 
      "langpair": "deen", 
      "negative_regex": "green and blue", 
      "negative_tokens": [
        "Callum has beaten his friend green and purple.", 
        "Tim has beaten his friend green, and blue.", 
        "Tim beat his friend Green and blue.", 
        "Tim beat his friend Green and Blue."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "black and blue", 
      "positive_tokens": [], 
      "source_sentence": "Tim hat seinen Freund gr\u00fcn und blau geschlagen. "
    }, 
    {
      "category": "MWE", 
      "id": "00160005", 
      "langpair": "deen", 
      "negative_regex": "the stuff", 
      "negative_tokens": [
        "Lerik has the rag for Alcatraz.", 
        "Lerik has that things for tourist attraction.", 
        "Lerik is a tourist attraction.", 
        "Lerik has the test of tourist attraction.", 
        "Lerik is a tourist attraction witness."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "the makings of|what it takes|has the potential", 
      "positive_tokens": [], 
      "source_sentence": "Lerik hat das Zeug zur Touristenattraktion."
    }, 
    {
      "category": "MWE", 
      "id": "00160006", 
      "langpair": "deen", 
      "negative_regex": "has good talk", 
      "negative_tokens": [
        "The manager has been talking well.", 
        "The exec has been talking well.", 
        "The manager has a good talk.", 
        "The Manager has a good talk.", 
        "The manager has spoken well.", 
        "The manager spoke well.", 
        "The manager did a good job.", 
        "The manager did a great job.", 
        "The manager talked well.", 
        "It's easy for the manager to talk.", 
        "The manager has been well talking."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "[Tt]hat(\u2019s| is) easy for you to say\\.|[Yy]ou\u2019ve got it easy\\.", 
      "positive_tokens": [], 
      "source_sentence": "Der Manager hat gut reden."
    }, 
    {
      "category": "MWE", 
      "id": "00160007", 
      "langpair": "deen", 
      "negative_regex": "[Nn]othing as questions", 
      "negative_tokens": [
        "Nothing as the questions are in the report.", 
        "Nothing more than questions are in the report.", 
        "There are no questions in the report."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "[Mm]ere|([Nn]othing|[Nn]one) but", 
      "positive_tokens": [
        "There are only questions in the report."
      ], 
      "source_sentence": "Nichts als Fragen stehen in dem Bericht."
    }, 
    {
      "category": "MWE", 
      "id": "00160008", 
      "langpair": "deen", 
      "negative_regex": "(in the sk(y|ies)|to heaven|in heaven)", 
      "negative_tokens": [
        "Lena has praised Tim's final work in the skies.", 
        "Lena praised Tims termination work into the sky.", 
        "Lena praised Tims thesis into the sky.", 
        "Lena has praised Tims's graduation work to Heaven.", 
        "Lena has praised Tim's final work in Heaven.", 
        "Lena has praised Tim's thesis in Heaven.", 
        "Lena praised Tintin\u2019s thesis into the sky."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "praised Tim's (thesis|final (assignment|paper)) to the skies|enskied Tim's (thesis|final (assignment|paper))", 
      "positive_tokens": [], 
      "source_sentence": "Lena hat Tims Abschlussarbeit in den Himmel gelobt."
    }, 
    {
      "category": "MWE", 
      "id": "00160009", 
      "langpair": "deen", 
      "negative_regex": "((sign(al)?|hint) with the fence( stake| ?post)|fence post)", 
      "negative_tokens": [
        "Lenin's testimony was a clear wink with the fence.", 
        "Lena's statement was a clear wink with the fence.", 
        "Lena's statement was a clear wink with the fence pole.", 
        "Lena's statement was a clear wink with the fence post.", 
        "Lenas' assertion was a clearer clap with the Zaunpfahl.", 
        "Lena's statement was a clear hint, hint.", 
        "Lena's testimony was a definite nod to the hint.", 
        "Lenin's statement was a clear waink with the Zaunpfahl.", 
        "Lena's statement was a clear wink with the fence pile.", 
        "Lenas assertion was a ambiguous Wink with the Zaunsty feast.", 
        "Lenas's statement was a clear wink with the fencepost.", 
        "Lena's statement was a clear Wink with the fence pole.", 
        "Lena \u2019 s statement was a clear angle with the fence.", 
        "Lenin's statement was a unique wink with the fence arrow.", 
        "Lena's testimony was a clear wink with the fence pile.", 
        " Lena's statement was a clear angle with the fence.", 
        " Lena's statement was a clear hint of fence.", 
        "Lena's statement was a clear wink with the fence stake.", 
        "Lena's statement was a clear hint with the fence pole.", 
        "Lena's statement was a clear link with the fence pile.", 
        "Lenas statement was a clear angle with the fence pile.", 
        "Lenin's statement was a unique wink with the Zaunpfahl."
      ], 
      "phenomenon": "Idiom", 
      "positive_regex": "broad hint", 
      "positive_tokens": [], 
      "source_sentence": "Lenas Aussage war ein eindeutiger Wink mit dem Zaunpfahl."
    }, 
    {
      "category": "MWE", 
      "id": "00160010", 
      "langpair": "deen", 
      "negative_regex": "blue letter", 
      "negative_tokens": [], 
      "phenomenon": "Idiom", 
      "positive_regex": "pink slip", 
      "positive_tokens": [], 
      "source_sentence": "Lena kam letzte Woche mit einem blauen Brief nach Hause."
    }, 
    {
      "category": "MWE", 
      "id": "00159001", 
      "langpair": "deen", 
      "negative_regex": "to foot", 
      "negative_tokens": [
        "I am always on my way to work.", 
        "I always go to work."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "afoot|(by|on) foot|walk", 
      "positive_tokens": [], 
      "source_sentence": "Ich gehe immer zu Fu\u00df zur Arbeit."
    }, 
    {
      "category": "MWE", 
      "id": "00159002", 
      "langpair": "deen", 
      "negative_regex": "(at|on) eye height", 
      "negative_tokens": [
        "This is another matchup on display.", 
        "That's a duel on par.", 
        "It's a matchup on oxygen.", 
        "This is a duel on equal footing.", 
        "This is a duel on a level playing field."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "((at|on) eye level|on an equal footing|on equal terms)", 
      "positive_tokens": [
        "This is a duel on eye-level.", 
        "This is a duel between equals."
      ], 
      "source_sentence": "Das ist ein Duell auf Augenh\u00f6he."
    }, 
    {
      "category": "MWE", 
      "id": "00159003", 
      "langpair": "deen", 
      "negative_regex": "came him to help", 
      "negative_tokens": [
        "He came it to assistance.", 
        "He came to the aid of him."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "to his (aid|help|assistance|rescue)", 
      "positive_tokens": [
        "He came to help him."
      ], 
      "source_sentence": "Er kam ihm zu Hilfe. "
    }, 
    {
      "category": "MWE", 
      "id": "00159004", 
      "langpair": "deen", 
      "negative_regex": "on duration", 
      "negative_tokens": [
        "Lena doesn't live on rule in Washington.", 
        "Lena does not want to live in Berlin on a long-term basis.", 
        "Lena does not want to live in Berlin in Berlin."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "for (good|the long haul)|permanently|in (perpetuity|the long (run|term))|on a permanent basis", 
      "positive_tokens": [
        "Lena doesn't want to live in Berlin for a long time.", 
        "Lena doesn't want to live in Berlin for the long term."
      ], 
      "source_sentence": "Lena m\u00f6chte nicht auf Dauer in Berlin leben."
    }, 
    {
      "category": "MWE", 
      "id": "00159005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lisa can cry on push of a button.", 
        "Lisa can be crying on instantaneous.", 
        "Lisa can cry at the button.", 
        "Lisa can swallow on button pressure.", 
        "Lisa can cry on a button pressure."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "cry (on demand|at the ((push|touch) of a button|flick of a switch))", 
      "positive_tokens": [], 
      "source_sentence": "Lisa kann auf Knopfdruck weinen."
    }, 
    {
      "category": "MWE", 
      "id": "00159006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tim liked the new car at first.", 
        "Callum has fallen the new car on aggregate.", 
        "Tim fell short of the new car.", 
        "Tim liked the new car on top of it.", 
        "Tim has dropped the new car on cue.", 
        "Tim liked the new car.", 
        "Tim has taken the new car on board.", 
        "Tim liked the new car on Anhieb."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "at (one|the first) (go|push)|instantly|(right|straight) away|straight off|straightaway|right off the bat|at the first attempt|offhand|immediately", 
      "positive_tokens": [], 
      "source_sentence": "Tim hat das neue Auto auf Anhieb gefallen."
    }, 
    {
      "category": "MWE", 
      "id": "00159007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "After blitzed, almonds can still insert.", 
        "To taste parsley can be added.", 
        "After Believes, Petersilie can still be going.", 
        "At will, parsley can still be added.", 
        "If desired, parsley can still be added.", 
        "President. - The next item is the joint debate on the following motions for resolutions:"
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "at one's (convenience|discretion|leisure|pleasure)|at (pleasure|will)|optionally|to taste|to your liking", 
      "positive_tokens": [
        "If desired, parsley can be added.", 
        "You can add parsley if you like.", 
        "You can add parsley as you like.", 
        "parsley can be added if desired.", 
        "Parsley can be added as desired.", 
        "Parsley can still be added as desired.", 
        "Parsley can be added if desired."
      ], 
      "source_sentence": "Nach Belieben kann noch Petersilie hinzugef\u00fcgt werden."
    }, 
    {
      "category": "MWE", 
      "id": "00159008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "With vindication, Tess heard that Callum was fallen through review.", 
        "With genius, Lisa heard that Tim was dropped through the law.", 
        "With appreciation, Lisa heard that Tim had fallen through the exam.", 
        "With Satisfaction, Lisa heard that Tim had fallen through the exam."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "([Ww]ith satisfaction|pleased)", 
      "positive_tokens": [], 
      "source_sentence": "Mit Genugtuung h\u00f6rte Lisa, dass Tim durch die Pr\u00fcfung gefallen war."
    }, 
    {
      "category": "MWE", 
      "id": "00159009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The burglars arrived overnight."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "(by|in the|at) night", 
      "positive_tokens": [], 
      "source_sentence": "Die Einbrecher kamen bei Nacht."
    }, 
    {
      "category": "MWE", 
      "id": "00159010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Police observed the burglary in authenticity over the CCTV.", 
        "The police observed the real-time collapse through the surveillance camera."
      ], 
      "phenomenon": "Prepositional MWE", 
      "positive_regex": "in real(-| )?time", 
      "positive_tokens": [], 
      "source_sentence": "Die Polizei beobachtete den Einbruch in Echtzeit \u00fcber die \u00dcberwachungskamera."
    }, 
    {
      "category": "MWE", 
      "id": "00463001", 
      "langpair": "deen", 
      "negative_regex": "made a walk", 
      "negative_tokens": [
        "After lunch, she made a stroll.", 
        "After lunch she made a stroll."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "((had|(under)?took|went for) a walk|went for a stroll)", 
      "positive_tokens": [], 
      "source_sentence": "Nach dem Mittagessen machte sie einen Spaziergang."
    }, 
    {
      "category": "MWE", 
      "id": "00463002", 
      "langpair": "deen", 
      "negative_regex": "(gives?|giving)", 
      "negative_tokens": [
        "My neighbor's dinner today.", 
        "My neighbor's today is a Party."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "((throws|is throwing)|(has|(is|'s) having)) a party", 
      "positive_tokens": [
        "My neighbor's having a Party tonight.", 
        "My neighbor is partying today.", 
        "My neighbour is partying today.", 
        "My Neighbor is having a Party today."
      ], 
      "source_sentence": "Mein Nachbar gibt heute eine Party. "
    }, 
    {
      "category": "MWE", 
      "id": "00463003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "On the attic, Millie slamming an old book.", 
        "In the attic Lena pushed on an old book.", 
        "On the roof floor slammed Lena on a old book.", 
        "In the attic, Lena came to an old book.", 
        "On the roof floor, Lena came up with an old book."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "came (across|upon)|happened across|banged into|was confronted with|bounced upon|numped into|hit upon|stumbled upon|discovered", 
      "positive_tokens": [
        "On the attic, Lena encountered an old book.", 
        "The attic Lena discovered on an old book.", 
        "Lena encountered an old book on the attic.", 
        "On the attic floor Lena found an old book.", 
        "Lena found an old book in the attic."
      ], 
      "source_sentence": "Auf dem Dachboden stie\u00df Lena auf ein altes Buch."
    }, 
    {
      "category": "MWE", 
      "id": "00463004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tim gave a kiss to Lena.", 
        "Tim gave Lena a shot."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "gave Lena a kiss|kissed Lena", 
      "positive_tokens": [
        "Callum gave Millie a kiss.", 
        "Tim gave lena a kiss."
      ], 
      "source_sentence": "Tim gab Lena einen Kuss."
    }, 
    {
      "category": "MWE", 
      "id": "00463005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lena could not hold their promise."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "(keep|hold|abide by) her promise|keep her word", 
      "positive_tokens": [], 
      "source_sentence": "Lena konnte ihr Versprechen nicht halten."
    }, 
    {
      "category": "MWE", 
      "id": "00463006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "blundered|(commited|made) a blunder|made a big mistake", 
      "positive_tokens": [], 
      "source_sentence": "Tim machte einen gro\u00dfen Fehler, indem er Lena das Auto abkaufte."
    }, 
    {
      "category": "MWE", 
      "id": "00463007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "After the work, Callum took as her first hot Victoria.", 
        "After the work, Tim took as first a tricky front.", 
        "After work, Tim took the first hot bath."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "(had|took) a hot bath", 
      "positive_tokens": [
        "After work, Tim was the first to take a hot bath.", 
        "After work, Tim took first a hot bath.", 
        "After the work Tim took first a hot bath.", 
        "After working, Tim was the first to take a hot bath.", 
        "After work Tim was the first to take a hot bath.", 
        "After the work Tim was the first to have a hot bath.", 
        "The first thing Tim took after work was a hot bath."
      ], 
      "source_sentence": "Nach der Arbeit nahm Tim als erstes ein hei\u00dfes Bad."
    }, 
    {
      "category": "MWE", 
      "id": "00463008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Millions not on the tide.", 
        "Lena did not look at the lights."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "mind|pay (attention|heed)|take heed|heed", 
      "positive_tokens": [
        "Lena ignored the traffic light.", 
        "Lena paid no attention to the traffic lights.", 
        "Lena wasn't paying attention to the traffic lights.", 
        "Lena paid no attention to the traffic light.", 
        "Lena did not respect the traffic lights."
      ], 
      "source_sentence": "Lena achtete nicht auf die Ampel."
    }, 
    {
      "category": "MWE", 
      "id": "00463009", 
      "langpair": "deen", 
      "negative_regex": "hung out", 
      "negative_tokens": [
        "Tims' future hung up by the decision of his bosses.", 
        "Tims future hung by the decision of his counter-terrorism cut."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "(depended|hinged) on|was (relative|subject) to", 
      "positive_tokens": [
        "Tim's future was dependent on his boss's decision."
      ], 
      "source_sentence": "Tims Zukunft hing von der Entscheidung seines Chefs ab."
    }, 
    {
      "category": "MWE", 
      "id": "00463010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "\"Harry Potter\" heard to my favourite books."
      ], 
      "phenomenon": "Verbal MWE", 
      "positive_regex": "ranks among|belongs to|is one of", 
      "positive_tokens": [
        "\"Harry Potter\" is among my favourite books."
      ], 
      "source_sentence": "\"Harry Potter\" geh\u00f6rt zu meinen Lieblingsb\u00fcchern."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Date", 
      "positive_regex": "(0?7(\\.|\\/|-)0?1(\\.|\\/|-)(20)?15|0?1(\\.|\\/|-)0?7(\\.|\\/|-)(20)?15|January 7(th)?,? 2015|January the 7th,? 2015|7(th of)? January,? 2015)", 
      "positive_tokens": [], 
      "source_sentence": "Das heutige Datum ist 07.01.2015."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The storm on the Bastille took place on July 14, 1889."
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(14(\\.|\\/|-)0?7(\\.|\\/|-)1789|0?7(\\.|\\/|-)14(\\.|\\/|-)1789|July 14(th)?,? 1789|July the 14th,? 1789|14(th of)? July,? 1789)", 
      "positive_tokens": [], 
      "source_sentence": "Der Sturm auf die Bastille erfolgte am 14.7.1789."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "On February 21., 1848, the Communist Manifesto of Marx and engels appeared.", 
        "On 21. The Communist Manifesto of Marx and Engels was published on 28 February 1848.", 
        "On 21 July. The Communist Manifesto of Marx and Thuringia was published on February 1, 1848.", 
        "On February 21., 1848, the communist manifesto of Marx and Engels appeared."
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(21(\\.|\\/|-)0?2(\\.|\\/|-)1848|0?2(\\.|\\/|-)21(\\.|\\/|-)1848|February 21(st)?,? 1848|February the 21st,? 1848|21(st of)? February,? 1848)", 
      "positive_tokens": [], 
      "source_sentence": "Am 21. Februar 1848 erschien das Kommunistische Manifest von Marx und Engels."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "On December 16., 1773, it came to the Boston Tea Party.", 
        "On 16. On December 12, 1773, it came to the Boston Tea Party.", 
        "On 16 July. The Boston Tea Party came into existence on December 1, 1777.", 
        "On December 16 , 1773 , the Boston Tea Party came into existence.", 
        "In 1773, the Boston Tea Party was formed.", 
        "Boston Tea Party came on December 16., 1773"
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(16(\\.|\\/|-)12(\\.|\\/|-)1773|12(\\.|\\/|-)16(\\.|\\/|-)1773|December 16(th)?,? 1773|December the 16th,? 1773|16(th of)? December,? 1773)", 
      "positive_tokens": [], 
      "source_sentence": "Am 16. Dezember 1773 kam es zur Boston Tea Party."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "On July 4 , 1776 the colonies declared independence."
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(0?4(\\.|\\/|-)0?7(\\.|\\/|-)1776|0?7(\\.|\\/|-)0?4(\\.|\\/|-)1776|July 4(th)?,? 1776|July the 4th,? 1776|4(th of)? July,? 1776)", 
      "positive_tokens": [], 
      "source_sentence": "Am 04.07.1776 wurde von den Kolonien die Unabh\u00e4ngigkeit verk\u00fcndet."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Date", 
      "positive_regex": "(17(\\.|\\/|-)0?9(\\.|\\/|-)1787|0?9(\\.|\\/|-)17(\\.|\\/|-)1787|September 17(th)?,? 1787|September the 17th,? 1787|17(th of)? September,? 1787)", 
      "positive_tokens": [], 
      "source_sentence": "Am 17.09.1787 erhielten die USA in Philadelphia ihre erste Verfassung."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The term \"cold war\" has most likely been used in public for the first time on April 16., 1947", 
        "The term \"Cold War\" is most likely the first time on 16. It was used in public on April 22, 1947.", 
        "The term \"Cold War\" is most likely the first time on 16 July. April 1947 was used in public.", 
        "The term \u2032\u2032 cold war \u2032\u2032 was most likely used in public for the first time on April 16., 1947"
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(16(\\.|\\/|-)0?4(\\.|\\/|-)(19)?47|0?4(\\.|\\/|-)16(\\.|\\/|-)(19)?47|April 16(th)?,? 1947|April the 16th,? 1947|16(th of)? April,? 1947)", 
      "positive_tokens": [], 
      "source_sentence": "Der Begriff \"Kalter Krieg\" ist h\u00f6chstwahrscheinlich das erste Mal am 16. April 1947 in der \u00d6ffentlichkeit verwendet worden."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The Queen was born on April 21, 1976."
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(21(\\.|\\/|-)0?4(\\.|\\/|-)(19)?26|0?4(\\.|\\/|-)21(\\.|\\/|-)(19)?26|April 21(st)?,? 1926|April the 21st,? 1926|21(st of)? April,? 1926)", 
      "positive_tokens": [], 
      "source_sentence": "Die Queen wurde am 21.04.1926 geboren."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The first world war started on July 28., 1914 with the declaration of war of Austria-Hungary to Serbia.", 
        "The first world war began on 28. July 1914 with the Declaration of war by Austria-Hungary to Serbia.", 
        "The First World War began on 28 July. July 1914 with the Declaration of War of Austria-Hungary to Serbia.", 
        "The first world war began on 28. July 1914 with the declaration of war of Austria-Hungary on Serbia."
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(28(\\.|\\/|-)0?7(\\.|\\/|-)(19)?14|0?7(\\.|\\/|-)28(\\.|\\/|-)(19)?14|July 28(th)?,? 1914|July the 28th,? 1914|28(th of)? July,? 1914)", 
      "positive_tokens": [], 
      "source_sentence": "Der erste Weltkrieg begann am 28. Juli 1914 mit der Kriegserkl\u00e4rung \u00d6sterreich-Ungarns an Serbien."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00466010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Freddy Mercury was born on 05.09.46 and died on 24.11.96.", 
        "Freddy Mercury was born on September 5th, 466 and died on November 24th, 1991.", 
        "Freddy Mercury was born on 05.09.46 and died on November 24th.", 
        "Freddy Mercury was born on September 5th and died on November 24th."
      ], 
      "phenomenon": "Date", 
      "positive_regex": "(0?5(\\.|\\/|-)0?9(\\.|\\/|-)(19)?46|0?9(\\.|\\/|-)0?5(\\.|\\/|-)(19)?46|September 5(th)?,? 1946|September the 5th,? 1946|5(th of)? September,? 1946).*(24(\\.|\\/|-)11(\\.|\\/|-)(19)?91|11(\\.|\\/|-)24(\\.|\\/|-)(19)?91|November 24(th)?,? 1991|November the 24th,? 1991|24(th of)? November,? 1991)", 
      "positive_tokens": [], 
      "source_sentence": "Freddy Mercury wurde am 05.09.46 geboren und starb am 24.11.91."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "This is where the Talyan ethnic group lives.", 
        "This is where the taly ethnic group lives.", 
        "This is where the Talysh people live.", 
        "This is where the Talyish ethnic group lives.", 
        "Here lives the Talys folk group.", 
        "This is where the Talysche ethnic group lives.", 
        "This is where the talyan ethnic group lives.", 
        "Here live the Talysche ethnic group.", 
        "The Talya people live here.", 
        "This is where the Talyan community lives.", 
        "This is where the Taly ethnic group lives.", 
        "The Taly ethnic group lives here.", 
        "This is where the Talysian ethnic group lives.", 
        "Here are the Talysche people lives.", 
        "The Talysh ethnic group lives here.", 
        "Here lives the Talysche ethnic group.", 
        "The Talyan ethnic group lives here.", 
        "The Talysche ethnic group lives here.", 
        "This is where the Talyian ethnic group lives."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "Talish ethnic(al)? group", 
      "positive_tokens": [], 
      "source_sentence": "Hier lebt die Talysche Volksgruppe."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552002", 
      "langpair": "deen", 
      "negative_regex": "fog|mist|haze", 
      "negative_tokens": [
        "Its resemblance to an earthly continent earned it the title of North America."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "nebula", 
      "positive_tokens": [], 
      "source_sentence": "Seine \u00c4hnlichkeit mit einem irdischen Kontinent brachte diesem Nebel den Titel Nordamerika ein."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552003", 
      "langpair": "deen", 
      "negative_regex": "head (tong|tick)", 
      "negative_tokens": [
        "The head pliers were also used in home births.", 
        "The Head Pliers were also used at midwife.", 
        "The headache was also used in household births.", 
        "The headcount was also used in domestic births.", 
        "The head tin was also used in home births.", 
        "The head pliers were also used in house births.", 
        "The head forceps were also used in home births.", 
        "The head forceps were also used in domestic births.", 
        "The pliers were also used for house births.", 
        "The head forceps was also used in home births.", 
        "The head brace was also used in home births.", 
        "The head clamp was also used in domestic births.", 
        "The headrest was also used in house burgers.", 
        "The pliers were also used for home births.", 
        "The head pliers were also used for home births.", 
        "The head pliers were also used in domestic births.", 
        "The head candle was also used in house bearings.", 
        "The head forceps were also used for home births.", 
        "The head pliers have also been used in home births."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "craniotomy forceps", 
      "positive_tokens": [], 
      "source_sentence": "Die Kopfzange wurde auch bei Hausgeburten verwendet."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Humane popiloma viruses are also common among young people in this country.", 
        "In this case, Human Immunodeficiency Viruses are often used in young people.", 
        "In this country, Human pappiloma virus before come in addition in adolescents.", 
        "In addition, human Pappilom viruses are common in adolescents.", 
        "In addition, humane pappilomaviruses often occur in young people.", 
        "Humane pappilomaviruses are also common among young people.", 
        "In this country, Humane Pappilomaviruses are also common among teenagers.", 
        "In this country, human pappilomaviruses are also common in adolescents.", 
        "In addition, human papiloma viruses are common in adolescents in this country.", 
        "Humane papilomaviruses are also common in adolescents in this country.", 
        "In this country, in addition, human papilloma viruses are common in adolescents.", 
        "In this country, human cardboard viruses are also common in young people.", 
        "In addition, Humane Pappilomaviren are common in young people in this country.", 
        "In this country, human papilloma viruses are also common among young people.", 
        "In this country, human pappiloma viruses are also common among adolescents.", 
        "Human pancreas are also common in these countries.", 
        "In addition, youths often experience humane cardpappilomaviruses.", 
        "In Germany, human papilomaviruses are also frequent in adolescents.", 
        "In this country, human pappiloma viruses are also common in adolescents.", 
        "Humane pappilomaviruses are also common in adolescents.", 
        "Human pappilomaviruses are also common in adolescents in this country.", 
        "In this country, human pappilomaviruses also occur frequently in adolescents.", 
        "In Germany, human pappilomaviruses are also common among adolescents.", 
        "In this country, human cardboard kilometre viruses are also common among young people.", 
        "Human pappilomaviruses are also common in adolescents.", 
        "Humane Pappilomavirus is also often present in young people.", 
        "In this country, Humane Pappilomaviruses are also common among young people.", 
        "Humane Pappilomaviren are also common among young people in this country.", 
        "In Germany, human pappiloma viruses are also common in adolescents."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "human papillomaviruses", 
      "positive_tokens": [
        "In this country, human papilomaviruses are also common among adolescents."
      ], 
      "source_sentence": "Hierzulande kommen zudem Humane Pappilomaviren bei Jugendlichen h\u00e4ufig vor."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "sexually transmitted diseases", 
      "positive_tokens": [], 
      "source_sentence": "Was sind die wichtigsten sexuell \u00fcbertragbaren Krankheiten?"
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The Republic of Korea (South Korea) is proclaimed.", 
        "The Republic of Korea (South Korea) is being proclaimed."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "declared", 
      "positive_tokens": [], 
      "source_sentence": "Die Republik Korea (S\u00fcdkorea) wird ausgerufen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552007", 
      "langpair": "deen", 
      "negative_regex": "room climate", 
      "negative_tokens": [
        "The climate is very pleasant.", 
        "The ambient climate is very pleasant."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "(interior|indoor) climate", 
      "positive_tokens": [], 
      "source_sentence": "Das Raumklima ist sehr angenehm."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552008", 
      "langpair": "deen", 
      "negative_regex": "[Bb]otenstoff", 
      "negative_tokens": [
        "In the latter case, this would be, among other things, the serotonin serotonin", 
        "In the latter case, this would include the messenger Serotonin.", 
        "In the latter case, this would be among other things the messenger Serotonin.", 
        "In the latter case, this would include the botanical substance serotonin.", 
        "In the latter case, this would be, among other things, serotonin."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "(neurotransmitter|messenger( substance)?) serotonin", 
      "positive_tokens": [], 
      "source_sentence": "In letzterem Fall w\u00e4re dies unter anderem der Botenstoff Serotonin."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Depending on the colour, recordings of spirals become true works of art.", 
        "Depending on the colour, images of spiral galaxy become true works of art."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "spiral galaxies", 
      "positive_tokens": [
        "Depending on the color setting, Spiral galaxies recordings become true works of art."
      ], 
      "source_sentence": "Je nach Farbgebung werden Aufnahmen von Spiralgalaxien zu wahren Kunstwerken."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00552010", 
      "langpair": "deen", 
      "negative_regex": "changing zone", 
      "negative_tokens": [
        "The Baton can only be handed over in the transition, which is 20 meters long.", 
        "The staff can only be handed over in the change zone, which is 20 meters long.", 
        "The rod can only be handed over to the alternating zone, which is 20 metres long.", 
        "The rod can be passed only in the alternating zone, which is 20 meters long.", 
        "The rod can only be handed over in the alternating zone, which is 20 meters long.", 
        "The staff can only be handed over in the interchange zone, which is 20 metres long.", 
        "The rod can only be passed in the change zone, which is 20 metres long.", 
        "The rod can only be passed in the alternating zone, which is 20 metres long.", 
        "The bar can only be passed in the alternating zone which is 20 meters long.", 
        "The stick can only be handed over in the change zone, which is 20 meters long.", 
        "The baton can only be handed over in the interchange zone, which is 20 metres long.", 
        "The rod can only be passed in the alternating zone, which is 20 meters long."
      ], 
      "phenomenon": "Domainspecific term", 
      "positive_regex": "(rod|baton).*(exchange|transition) zone", 
      "positive_tokens": [
        "The rod can only be handed over in the transition zone, which is 20 meters long.", 
        "The rod can only be passed in the change zone, which is 20 meters long.", 
        "The rod can only be handed over in the change zone, which is 20 meters long.", 
        "The bar can only be handed over in the exchange zone, which is 20 meters long.", 
        "The baton can only be handed over in the transition area, which is 20 meters long."
      ], 
      "source_sentence": "Der Stab kann nur in der Wechselzone \u00fcbergeben werden, die 20 Meter lang ist."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469001", 
      "langpair": "deen", 
      "negative_regex": "K[\u00f6o]ln.*M[\u00fcu]nchen", 
      "negative_tokens": [
        "Tomorrow I'm going to cologne and next week to Munich."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Cologne.*Munich", 
      "positive_tokens": [], 
      "source_sentence": "Morgen fahre ich nach K\u00f6ln und n\u00e4chste Woche nach M\u00fcnchen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469002", 
      "langpair": "deen", 
      "negative_regex": "Sachsen", 
      "negative_tokens": [
        "We're going to saxony on vacation every year."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Saxony", 
      "positive_tokens": [], 
      "source_sentence": "Wir fahren jedes Jahr nach Sachsen in den Urlaub."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "He always wanted to travel to the Galapagos islands."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Galapagos Islands", 
      "positive_tokens": [], 
      "source_sentence": "Er wollte schon immer mal auf die Galapagos Inseln reisen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469004", 
      "langpair": "deen", 
      "negative_regex": "Hannover", 
      "negative_tokens": [], 
      "phenomenon": "Location", 
      "positive_regex": "Hanover", 
      "positive_tokens": [], 
      "source_sentence": "Im Mai muss ich beruflich nach Hannover reisen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469005", 
      "langpair": "deen", 
      "negative_regex": "Eiffelturm", 
      "negative_tokens": [
        "From the Eiffel tower you have a magnificent view."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Eiffel Tower", 
      "positive_tokens": [], 
      "source_sentence": "Vom Eiffelturm aus hat man einen herrlichen Ausblick."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I've never been to alexanderplatz in Berlin.", 
        "I've never been to the hotel square in Berlin.", 
        "I have never been in Berlin."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Alexanderplatz.*Berlin", 
      "positive_tokens": [
        "I have never been to Berlin's Alexanderplatz."
      ], 
      "source_sentence": "Ich war noch nie auf dem Alexanderplatz in Berlin."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469007", 
      "langpair": "deen", 
      "negative_regex": "[Cc]astle of [Vv]ersailles|[Vv]ersailles [Cc]astle", 
      "negative_tokens": [
        "The Versailles Contract was closed at the Paris Peace Conference 1919 at the castle of Versailles.", 
        "The Treaty of Versailles was signed at the Paris Peace Conference in 1919 at the palace of Versailles.", 
        "The Treaty of Versailles was concluded at the Paris Peace Conference in 1919 in the castle of Versailles.", 
        "The Versailles Treaty was concluded at the Paris Peace Conference in the Versailles Palace in 1919.", 
        "The Treaty of Versailles was concluded at the Paris Peace Conference in 1919 in the palace of Versailles."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Palace of Versailles", 
      "positive_tokens": [], 
      "source_sentence": "Der Versailler Vertrag wurde bei der Pariser Friedenskonferenz 1919 im Schloss von Versailles geschlossen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "At the hamburg reeperbahn you can participate in the dazzling nightlife."
      ], 
      "phenomenon": "Location", 
      "positive_regex": "Reeperbahn.*Hamburg|Hamburg.*Reeperbahn", 
      "positive_tokens": [], 
      "source_sentence": "Auf der Hamburger Reeperbahn kann man am schillernden Nachtleben teilhaben."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469009", 
      "langpair": "deen", 
      "negative_regex": "Malediven", 
      "negative_tokens": [], 
      "phenomenon": "Location", 
      "positive_regex": "Maldives", 
      "positive_tokens": [], 
      "source_sentence": "Am liebsten w\u00e4re ich jetzt am Strand auf den Malediven."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00469010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Location", 
      "positive_regex": "Phuket", 
      "positive_tokens": [], 
      "source_sentence": "Wir waren nicht in Phuket, als der Tsunami alles zerst\u00f6rte."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468001", 
      "langpair": "deen", 
      "negative_regex": "\\bpounds\\b", 
      "negative_tokens": [
        "The newborn elephant baby in the Berlin Animal Park weighs about 100 kilo."
      ], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "\\bkilos\\b", 
      "positive_tokens": [], 
      "source_sentence": "Das neugeborene Elefantenbaby im Berliner Tierpark wiegt ungef\u00e4hr 100 Kilo."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "16 million", 
      "positive_tokens": [], 
      "source_sentence": "Zu Beginn der 50er Jahre gab es in Afrika 16 Millionen Katholiken."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468003", 
      "langpair": "deen", 
      "negative_regex": "3,5 million", 
      "negative_tokens": [
        "In Berlin, nearly 3,5 million people live."
      ], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "3\\.5 million", 
      "positive_tokens": [], 
      "source_sentence": "In Berlin leben knapp 3,5 Millionen Menschen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The new model drives up to 250km / h fast.", 
        "The new model runs up to 250 km / h quickly.", 
        "The new model drives up to 250 km / h fast.", 
        "The new model can reach speeds of up to 250 km / h.", 
        "The new model can travel up to 250 km / h.", 
        "The new model can travel up to 250 km / h fast.", 
        "The new model runs at speeds of up to 250 km / h.", 
        "The new model drives up to 250 km / h.", 
        "The new model drives at speeds of up to 250 km / h.", 
        "The new model goes up to 250 mph fast.", 
        "The new model runs up to 250 km / h rapidly.", 
        "The new model speeds up to 250 km / h.", 
        "The new model travels at speeds of up to 250 km / h."
      ], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "250 (km/h|kilometers per hour|kilometres per hour)", 
      "positive_tokens": [], 
      "source_sentence": "Das neue Modell f\u00e4hrt bis zu 250 km/h schnell."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468005", 
      "langpair": "deen", 
      "negative_regex": "hour kilometers", 
      "negative_tokens": [
        "The new model drives up to 250 going fast.", 
        "The new model runs up to 250 km / h.", 
        "The new model can reach speeds of up to 250 km / h.", 
        "The new model drives up to 250 km / h quickly.", 
        "The new model drives up to 250 kilometers an hour.", 
        "The new model travels up to 250 hours of kilometres quickly.", 
        "The new model runs up to 250 kilometers fast."
      ], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "250 (km/h|kilometers per hour|kilometres per hour)", 
      "positive_tokens": [
        "The new model runs up to 250 km per hour."
      ], 
      "source_sentence": "Das neue Modell f\u00e4hrt bis zu 250 Stundenkilometer schnell."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Then give two tablespoon of flour to it.", 
        "Then give two spoons of flour."
      ], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "(two|2) (tablespoons|tbsp.)", 
      "positive_tokens": [], 
      "source_sentence": "Geben Sie dann zwei Essl\u00f6ffel Mehl dazu."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "300 grams", 
      "positive_tokens": [], 
      "source_sentence": "Das Katzenbaby hat bereits 300 Gramm zugenommen."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "300 (meters|metres)", 
      "positive_tokens": [], 
      "source_sentence": "Der Eiffelturm ist 300 Meter hoch."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468009", 
      "langpair": "deen", 
      "negative_regex": "5,4 seconds", 
      "negative_tokens": [
        "From Zero to 100 in just 5,4 seconds the new bmw speeds up."
      ], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "5\\.4 seconds", 
      "positive_tokens": [], 
      "source_sentence": "Von Null auf 100 in nur 5,4 Sekunden beschleunigt der neue BMW."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00468010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Measuring unit", 
      "positive_regex": "12 minutes", 
      "positive_tokens": [], 
      "source_sentence": "Es bleiben noch 12 Minuten bis Mitternacht."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00485001", 
      "langpair": "deen", 
      "negative_regex": "cabbage", 
      "negative_tokens": [], 
      "phenomenon": "Proper name", 
      "positive_regex": "Kohl", 
      "positive_tokens": [], 
      "source_sentence": "Der deutsche Kanzler in den letzten Jahren des kalten Krieges war Kohl."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00485002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The project is also nominated for the 2012 Dutch National Wood Award.", 
        "The project has also been nominated for the Dutch national Wood Award 2012."
      ], 
      "phenomenon": "Proper name", 
      "positive_regex": "Dutch National Wood Award 2012", 
      "positive_tokens": [], 
      "source_sentence": "Au\u00dferdem ist das Projekt f\u00fcr den Dutch National Wood Award 2012 nominiert."
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00485003", 
      "langpair": "deen", 
      "negative_regex": "October celebration", 
      "negative_tokens": [
        "Every year in September, the University of Applied Sciences begins.", 
        "October begins every year in September."
      ], 
      "phenomenon": "Proper name", 
      "positive_regex": "Oktoberfest", 
      "positive_tokens": [], 
      "source_sentence": "Jedes Jahr im September beginnt das Oktoberfest. "
    }, 
    {
      "category": "Named entitiy & terminology", 
      "id": "00485004", 
      "langpair": "deen", 
      "negative_regex": "[Cc]astle", 
      "negative_tokens": [
        "Fortress is my favorite actor.", 
        "Luxembourg is my favourite actor."
      ], 
      "phenomenon": "Proper name", 
      "positive_regex": "Burg", 
      "positive_tokens": [], 
      "source_sentence": "Burg ist mein Lieblingsschauspieler."
    }, 
    {
      "category": "Negation", 
      "id": "00479001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The manager has not been able to give off students the test.", 
        "The exec has told the student the test was not there."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "The manager did(n't| not) give (the student the test|the test to the student)", 
      "positive_tokens": [
        "The Manager has not given the students the Test.", 
        "The Manager didn't give the student the test.", 
        "The manager has not given the test to the student.", 
        "The Manager didn't give the student the Test.", 
        "The Manager did not give the student the Test."
      ], 
      "source_sentence": "Der Manager hat dem Studenten den Test nicht gegeben."
    }, 
    {
      "category": "Negation", 
      "id": "00479002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Negation", 
      "positive_regex": "It('s| is) (not a|no) bet", 
      "positive_tokens": [
        "There is no bet."
      ], 
      "source_sentence": "Es ist keine Wette."
    }, 
    {
      "category": "Negation", 
      "id": "00479003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lena is not a small money."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "no cash|does(n't| not) have (cash|change|any small money)", 
      "positive_tokens": [
        "Lena has no small money.", 
        "Lena has no small change.", 
        "Lena has no change.", 
        "Lena does not have change.", 
        "Lena has no petty money.", 
        "Lena doesn't have a small amount of money.", 
        "Lena doesn't have any change."
      ], 
      "source_sentence": "Lena hat kein Kleingeld. "
    }, 
    {
      "category": "Negation", 
      "id": "00479004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "We can't go off without Tim.", 
        "Without Tim, we can't go off.", 
        "Without Tintin we cannot go off.", 
        "Without Tim we cannot drive off.", 
        "We can't drive off without Tim.", 
        "We can't start without Tim.", 
        "We can't drive without Tim.", 
        "Without Tim we can't get rid of."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "(Without Tim )?[Ww]e (can't|can not|cannot) (go on|leave|(take|set) off|hit the road|start|drive|go|go off|get off)( without Tim)?", 
      "positive_tokens": [
        "Without Tim we can't go away.", 
        "Without Tim, we can't get going.", 
        "We can't go without Tim.", 
        "We can not start without Tim.", 
        "Without Tim, we can't go.", 
        "Without Tim, we can't go away.", 
        "Without Tim we can't get started."
      ], 
      "source_sentence": "Ohne Tim k\u00f6nnen wir nicht losfahren."
    }, 
    {
      "category": "Negation", 
      "id": "00479005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I think that's also not supported the American position.", 
        "I believe that it does not support also the American position.", 
        "I do not believe that it also supports the American Position.", 
        "I think it's also not supported the American position.", 
        "Nor, I believe, does it support the American position."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "does(n't| not) support.* either|also does(n't| not) support", 
      "positive_tokens": [
        "I don't think it supports the American position either.", 
        "I believe that it does not support the American Position.", 
        "I do not believe that it supports the American position either.", 
        "I do not think it supports the American position either.", 
        "I don't think it supports the American Position either."
      ], 
      "source_sentence": "Ich glaube, dass es auch nicht die amerikanische Position unterst\u00fctzt."
    }, 
    {
      "category": "Negation", 
      "id": "00479006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Why found the children no Easter?", 
        "Why did not the children find easter eggs?", 
        "Why were the children not Easter eggs?", 
        "Why did the children not found Easter eggs?", 
        "Why did the children not find Easter eggs"
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "did(n't).*find|did.*not find", 
      "positive_tokens": [
        "Why did the children not find Easter eggs?", 
        "Why didn't the children find Easter eggs?", 
        "Why didn't the kids find Easter eggs?", 
        "Why did the children not Find Easter eggs?", 
        "Why did children not find Easter eggs?", 
        "Why couldn't the children find Easter eggs?"
      ], 
      "source_sentence": "Warum fanden die Kinder keine Ostereier?"
    }, 
    {
      "category": "Negation", 
      "id": "00479007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Everyone except Lisa has read the book."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "([Nn]o person than|([Nn]obody|[Nn]o one) (except|but|apart from)).*(has)? read", 
      "positive_tokens": [
        "Nobody else but Lisa read the book."
      ], 
      "source_sentence": "Niemand au\u00dfer Lisa hat das Buch gelesen."
    }, 
    {
      "category": "Negation", 
      "id": "00479008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Negation", 
      "positive_regex": "could(n't| not) find.*anywhere", 
      "positive_tokens": [], 
      "source_sentence": "Tim konnte seine Brille nirgendwo finden."
    }, 
    {
      "category": "Negation", 
      "id": "00479009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "We do not have to lose anything.", 
        "We have nothing to losing."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "have nothing to lose|do(n't not) have anything to lose", 
      "positive_tokens": [], 
      "source_sentence": "Wir haben nichts zu verlieren."
    }, 
    {
      "category": "Negation", 
      "id": "00479010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Karl doesn't wash his own car.", 
        "Karl washes his car not himself.", 
        "Karl watering being car not let.", 
        "Laurence washes his car not even.", 
        "Karl did not even wash his car.", 
        "Karl does not wash its car.", 
        "Karl wasn't washing his car himself.", 
        "Karl was not ashamed by his car."
      ], 
      "phenomenon": "Negation", 
      "positive_regex": "does(n't| not) wash.*himself", 
      "positive_tokens": [], 
      "source_sentence": "Karl w\u00e4scht sein Auto nicht selbst. "
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061001", 
      "langpair": "deen", 
      "negative_regex": "\\byour\\b", 
      "negative_tokens": [
        "It has an exact conception of its perfect house."
      ], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bher\\b", 
      "positive_tokens": [], 
      "source_sentence": "Sie hat eine genaue Vorstellung von ihrem perfekten Haus."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061002", 
      "langpair": "deen", 
      "negative_regex": "\\bhim\\b", 
      "negative_tokens": [], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bit\\b", 
      "positive_tokens": [], 
      "source_sentence": "Mir gef\u00e4llt dieser Tisch, ich nehme ihn."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061003", 
      "langpair": "deen", 
      "negative_regex": "\\bhim\\b", 
      "negative_tokens": [], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bit\\b", 
      "positive_tokens": [], 
      "source_sentence": "Karl hat einen Hund bekommen und hat den ganzen Tag mit ihm gespielt."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061004", 
      "langpair": "deen", 
      "negative_regex": "(hairs.*\\bthey\\b are|her hair.*(they|you))", 
      "negative_tokens": [
        "Lena has its hair colored, now is blond it.", 
        "Lena has their hair coloured now they are blond."
      ], 
      "phenomenon": "Coreference", 
      "positive_regex": "her hair.*(it('s| is)|\\bshe\\b('s| is))", 
      "positive_tokens": [
        "Millie has dyed their hair, now they're blondes."
      ], 
      "source_sentence": "Lena hat ihre Haare gef\u00e4rbt, jetzt sind sie blond."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061005", 
      "langpair": "deen", 
      "negative_regex": "\\bher\\b|\\bthem\\b", 
      "negative_tokens": [], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bit\\b", 
      "positive_tokens": [], 
      "source_sentence": "Die Tischdecke ist ein Erbst\u00fcck, ich habe sie von meiner Gro\u00dfmutter bekommen."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061006", 
      "langpair": "deen", 
      "negative_regex": "(\\bher\\b|\\bshe\\b)", 
      "negative_tokens": [
        "Tim bought a new pair of trousers, but she didn't like Lena.", 
        "Tim has bought a new pair of pants, but you didn't like Lena."
      ], 
      "phenomenon": "Coreference", 
      "positive_regex": "(\\bit\\b|\\bthem\\b)", 
      "positive_tokens": [], 
      "source_sentence": "Tim hat sich eine neue Hose gekauft, aber sie hat Lena nicht gefallen.\n"
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061007", 
      "langpair": "deen", 
      "negative_regex": "\\bshe\\b", 
      "negative_tokens": [
        "The lamp is broken.", 
        "The lamp is not broken."
      ], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bit\\b", 
      "positive_tokens": [], 
      "source_sentence": "Die Lampe ist kaputt, sie geht nicht mehr an."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061008", 
      "langpair": "deen", 
      "negative_regex": "\\bhim\\b", 
      "negative_tokens": [], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bit\\b", 
      "positive_tokens": [], 
      "source_sentence": "Der Teppich ist neu, ich habe ihn gestern gekauft."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061009", 
      "langpair": "deen", 
      "negative_regex": "\\b[hH]e\\b", 
      "negative_tokens": [], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\b[Ii]t\\b", 
      "positive_tokens": [], 
      "source_sentence": "Ich suche den blauen Ball, er ist seit gestern verschwunden."
    }, 
    {
      "category": "Non-verbal agreement", 
      "id": "00061010", 
      "langpair": "deen", 
      "negative_regex": "\\bhe\\b", 
      "negative_tokens": [
        "The parrot of Nachbarns is very Mr Kreischt, according to the whole day.", 
        "The neighbor's parrot is very loud, circling all day.", 
        "The neighbour's parrot is very loud, screaming all day."
      ], 
      "phenomenon": "Coreference", 
      "positive_regex": "\\bit\\b", 
      "positive_tokens": [
        "The neighbor's parrot is very loud and screams all day long."
      ], 
      "source_sentence": "Der Papagei des Nachbarns ist sehr laut, er kreischt den ganzen Tag."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470001", 
      "langpair": "deen", 
      "negative_regex": "( ?(\"|\u201c|') ?, [Ss]he said\\.|,(\"|\u201c|') She)", 
      "negative_tokens": [
        "I was in London last year, she said.", 
        "\u201cI was last year in London\u201d, said her."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": ",(\"|\u201d) she", 
      "positive_tokens": [], 
      "source_sentence": "\"Ich war letztes Jahr in London\", sagte sie. "
    }, 
    {
      "category": "Punctuation", 
      "id": "00470002", 
      "langpair": "deen", 
      "negative_regex": "He said: (\"|\u201c|') ?", 
      "negative_tokens": [
        "He said: 'I am going to Paris this year'.", 
        "He said, \" I'm going to Paris this year.\"", 
        "He said, 'I'm going to Paris this year.'", 
        "He said \u2032\u2032 I'm going to Paris this year.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "He said, (\"|\u201c)[A-Z]", 
      "positive_tokens": [], 
      "source_sentence": "Er sagte: \"Ich fahre dieses Jahr nach Paris.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470003", 
      "langpair": "deen", 
      "negative_regex": "We (said|meant): (\"|\u201c|') ?", 
      "negative_tokens": [
        "We said: 'We fly to Mallorca'.", 
        "We say: \"We fly after Mallorca.\"", 
        "We thought: \"We fly to Mallorca.\"", 
        "We shouted: \"fly to Majorca.\"", 
        "We said, \" we're flying to mallorca.\"", 
        "We said, 'We're flying to Majorca.'", 
        "We said, \u2032\u2032 We're going to Mallorca.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "We (said|meant), (\"|\u201c)[A-Z]", 
      "positive_tokens": [
        "We thought, \"We fly to Mallorca.\"", 
        "We were like, \"We're flying to Mallorca.\""
      ], 
      "source_sentence": "Wir meinten: \"Wir fliegen nach Mallorca.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470004", 
      "langpair": "deen", 
      "negative_regex": " ?(\"|\u201c|') ?, (Tom said|said Tom)", 
      "negative_tokens": [
        "She came to my party, Tom said.", 
        "\u201cYou Tom came to my party\u201d, said.", 
        "\"she came to my party\", tom said."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": ",(\"|\u201d) (Tom (answered|said)|(answered|said) Tom)", 
      "positive_tokens": [], 
      "source_sentence": "\"Sie kam zu meiner Party\", sagte Tom."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470005", 
      "langpair": "deen", 
      "negative_regex": "(He (called|shouted|exclaimed|cried): (\"|\u201c|') ?|He (called|exclaimed|cried|shouted), (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "He urged: \"I gains!\"", 
        "He shouted, \" I win!\"", 
        "He said: \"I win!\"", 
        "He shouted, \u2032\u2032 I'm winning!\"", 
        "He wrote: 'I win!'"
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "He (called|shouted|exclaimed|cried), (\"|\u201c)[A-Z]", 
      "positive_tokens": [
        "He said, \"I win!\""
      ], 
      "source_sentence": "Er rief: \"Ich gewinne!\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470006", 
      "langpair": "deen", 
      "negative_regex": "( ?\\! ?(\"|\u201c|'|\u201d) ?, [Ss]he|\\!(\"|\u201c|'|\u201d) She)", 
      "negative_tokens": [
        "You have to clean up, she complained.", 
        "You've got to clean up! She lamented.", 
        "\u201cYou must clear up! \u201d, it deplored.", 
        "\"You have to clean up!\" She lamented.", 
        "\"You're set!\" She lamented.", 
        "\"You have to clean it up!\", you defendant.", 
        "\"You have to clean up!\"she complained.", 
        "\"You have to get rid of! \"She complained.", 
        "\"You have to clean up,\" she complained."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "\\!(\"|\u201d) she", 
      "positive_tokens": [], 
      "source_sentence": "\"Du musst aufr\u00e4umen!\", beklagte sie."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470007", 
      "langpair": "deen", 
      "negative_regex": "( ?\\? ?(\"|\u201c|'|\u201d) ?, [Hh]e|\\?(\"|\u201c|') He)", 
      "negative_tokens": [
        "Can I get back? He asked.", 
        "Can I get in? He asked.", 
        "\"Can I get in?,\" he asked.", 
        "\"Can I come clean?\" He asked.", 
        "\"Can I get in?\" He asked.", 
        "\"Can I reincome?\" He asked.", 
        "\"Can I come in?\"he asked.", 
        "\"Can I come in\" he asked.", 
        "\"Can I get there? \"He asked."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "\\?(\"|\u201d) he", 
      "positive_tokens": [], 
      "source_sentence": "\"Kann ich reinkommen?\", fragte er."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470008", 
      "langpair": "deen", 
      "negative_regex": "( ?\\! ?(\"|\u201c|'|\u201d) ?, [Ss]he|\\!(\"|\u201c|'|\u201d) She)", 
      "negative_tokens": [
        "Wait for me !, she cried.", 
        "Wait for me! She cried.", 
        "\u201cWaits for me! \u201d, it called.", 
        "\"Wait for me!,\" she called.", 
        "\"Wait for me!\" She cried.", 
        "\"Awaits me!\" She urged.", 
        "\"Wait for me!\"she cried.", 
        "\"wait for me,\" she cried.", 
        "\"Wait for me! \"She called.", 
        "\"Wait for me,\" she cried."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "\\!(\"|\u201d) she", 
      "positive_tokens": [], 
      "source_sentence": "\"Wartet auf mich!\", rief sie."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470009", 
      "langpair": "deen", 
      "negative_regex": "( ?(\"|\u201c|') ?, [Ss]he|,(\"|\u201c|') She)", 
      "negative_tokens": [
        "Next week I'll go home, she said.", 
        "Next week I'm going home, she said.", 
        "\u201cNext week drive I home\u201d, said her.", 
        "Next week I will go home, she said."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": ",(\"|\u201d) she", 
      "positive_tokens": [], 
      "source_sentence": "\"N\u00e4chste Woche fahre ich heim\", sagte sie."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470010", 
      "langpair": "deen", 
      "negative_regex": "( ?\\! ?(\"|\u201c|'|\u201d) ?, [Hh]e|\\!(\"|\u201c|') He)", 
      "negative_tokens": [
        "I shot a goal! He shouted.", 
        "I scored a goal! He shouted.", 
        "\"I shot a gate!,\" he cried.", 
        "\"I scored a goal!\" He shouted.", 
        "\"I've got a hit!\" He screamed.", 
        "\"I shot a goal!\"he cried.", 
        "\"I have shot a goal,\" he shouted.", 
        "\"I scored a goal!\"he screamed.", 
        "\"I've shot a door! \"He wrote."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "\\!(\"|\u201d) he", 
      "positive_tokens": [], 
      "source_sentence": "\"Ich habe ein Tor geschossen!\", schrie er. "
    }, 
    {
      "category": "Punctuation", 
      "id": "00470011", 
      "langpair": "deen", 
      "negative_regex": "( ?(\"|\u201c|') ?, he|,(\"|\u201c|') He)", 
      "negative_tokens": [
        "We take the spaghetti he said.", 
        "We take the spaghetti, he said.", 
        "We'll take the spaghetti, he said.", 
        "\u201cWe take the spaghetti\u201d, said it."
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": ",(\"|\u201d) he", 
      "positive_tokens": [], 
      "source_sentence": "\"Wir nehmen die Spaghetti\", sagte er."
    }, 
    {
      "category": "Punctuation", 
      "id": "00470012", 
      "langpair": "deen", 
      "negative_regex": " ?(\"|\u201c|'|\u201d) ?, (Lena said|said Lena), (\"|\u201c|'|\u201d) ?", 
      "negative_tokens": [
        "I believe, said Lena, \"I can not win any more.\"", 
        "\"I believe,\" Lena said,\"I can't win anymore.\"", 
        "\" I believe \", lena said, \" I can't win anymore.\"", 
        "\"I think,\" said Lena, \" I can't win anymore.\"", 
        "\"I think,\" Lena said,\"I can't win anymore.\"", 
        "\u2032\u2032 I think \", said Lena, \u2032\u2032 I can't win anymore.\"", 
        "\"I don't think I can win anymore, \"Lena said.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": ",(\"|\u201d) (Lena said|said Lena), (\"|\u201c)[A-Z]", 
      "positive_tokens": [
        "\"I think,\" Tina said, \"I can't win more.\""
      ], 
      "source_sentence": "\"Ich glaube\", sagte Lena, \"ich kann nicht mehr gewinnen.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470013", 
      "langpair": "deen", 
      "negative_regex": "(He said: (\"|\u201c|')|He said, (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "He said: 'All come together at Christmas'.", 
        "He said: 'On Christmas everyone comes together.'", 
        "He said, \" Christmas is all coming together.\"", 
        "He said, \" at Christmas everyone will come together.\"", 
        "He said, 'Everybody comes together at Christmas.'", 
        "He said,\"All come together at Christmas.\"", 
        "He said, \u2032\u2032 Everyone is coming together on Christmas.\"", 
        "He said, \" everyone comes together at Christmas.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "He said, (\"|\u201c)[A-Z]", 
      "positive_tokens": [], 
      "source_sentence": "Er sagte: \"An Weihnachten kommen alle zusammen.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470014", 
      "langpair": "deen", 
      "negative_regex": "(She said: (\"|\u201c|') ?|She said, (\"|\u201c|')[a-z]|She said, ')", 
      "negative_tokens": [
        "She said, \" we're going to build a house.\"", 
        "She said, \" We will build a house.\"", 
        "She said \u2032\u2032 we gonna build a house.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "She said, (\"|\u201c)[A-Z]", 
      "positive_tokens": [], 
      "source_sentence": "Sie sagte: \"Wir werden ein Haus bauen.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470015", 
      "langpair": "deen", 
      "negative_regex": "(She said: (\"|\u201c|') ?|, (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "She said, \" I'm interested in football.\"", 
        "She said \u2032\u2032 I'm interested in football.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "She said, (\"|\u201c)[A-Z]", 
      "positive_tokens": [], 
      "source_sentence": "Sie sagte: \"Ich interessiere mich f\u00fcr Fu\u00dfball.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470016", 
      "langpair": "deen", 
      "negative_regex": " ?(\"|\u201c|'|\u201d) ?, (the king said|said the king), (\"|\u201c|'|\u201d) ?", 
      "negative_tokens": [
        "I, said the king, \"love you, my child.\"", 
        "\"I said,\" the king, \"love me, my child.\"", 
        "\"I,\" the king said,\"love you, my child.\"", 
        "\u2032\u2032 I \", said the king, \u2032\u2032 love you my child.\"", 
        "\"I,\" said the King, \"love you, my child.\"", 
        "I, said the King, love you, my child.", 
        "\"I,\" the King said, \"Love you, my child.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": ",(\"|\u201d) (the king said|said the king), (\"|\u201c)", 
      "positive_tokens": [
        "\"I,\" said the King, \"Love You, my child.\"", 
        "\"I love you, my child,\" said the king."
      ], 
      "source_sentence": "\"Ich\", sagte der K\u00f6nig, \"liebe dich, mein Kind.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470017", 
      "langpair": "deen", 
      "negative_regex": "(She asked: (\"|\u201c|') ?|, (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "You asked: \"Does your foot hurt?\"", 
        "She asked: \"doesn't yours? '", 
        "She asked,\"Does your foot hurt?\"", 
        "She asked, \" does your foot hurt?\"", 
        "She asked, \u2032\u2032 Does your foot hurt?\"", 
        "She asked, \" Does your foot hurt?\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "She asked, (\"|\u201c)[A-Z]", 
      "positive_tokens": [
        "She said, \u201cDoes your foot hurt?\u201d"
      ], 
      "source_sentence": "Sie fragte: \"Tut dein Fu\u00df weh?\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470018", 
      "langpair": "deen", 
      "negative_regex": "(He said: (\"|\u201c|') ?|, (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "He said, \" yesterday I was in the cinema.\"", 
        "He said, 'Yesterday I was in the cinema.'", 
        "He said, \u2032\u2032 I was at the movies yesterday.\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "He said, (\"|\u201c)[A-Z]", 
      "positive_tokens": [], 
      "source_sentence": "Er sagte: \"Gestern war ich im Kino.\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470019", 
      "langpair": "deen", 
      "negative_regex": "(He said: (\"|\u201c|') ?|, (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "He said: 'This is a miracle!'", 
        "He said, \" this is a miracle!\"", 
        "He said, \u2032\u2032 That's a miracle!\"", 
        "He said, \" This is a miracle!\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "He said, (\"|\u201c)[A-Z]", 
      "positive_tokens": [], 
      "source_sentence": "Er sagte: \"Das ist ein Wunder!\""
    }, 
    {
      "category": "Punctuation", 
      "id": "00470020", 
      "langpair": "deen", 
      "negative_regex": "(She asked: (\"|\u201c|') ?|, (\"|\u201c|')[a-z])", 
      "negative_tokens": [
        "You asked: \"here Are all the crazy?\"", 
        "She asked: \"are you all mad here? '", 
        "She asked,\"Are everyone crazy here?\"", 
        "She asked, \" are everyone crazy here?\"", 
        "She asked, \" are all crazy here?\"", 
        "She asked,\"Are you all crazy here?\"", 
        "She asked, \u2032\u2032 Is everyone crazy here?\"", 
        "She asked, \" Are everyone crazy here?\""
      ], 
      "phenomenon": "Quotation marks", 
      "positive_regex": "She asked, (\"|\u201c)[A-Z]", 
      "positive_tokens": [
        "She said, \u201cAre everyone crazy here?\u201d"
      ], 
      "source_sentence": "Sie fragte: \"Sind hier alle verr\u00fcckt?\""
    }, 
    {
      "category": "Subordination", 
      "id": "00095001", 
      "langpair": "deen", 
      "negative_regex": "(jogging|running), (even |al)?though", 
      "negative_tokens": [
        "Went to Lisa for a jog, even though it was raining.", 
        "The room was clean and comfortable.", 
        "Lisa went joggen, although it ruined."
      ], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "(jogging|running) (even |al)?though", 
      "positive_tokens": [], 
      "source_sentence": "Lisa ging joggen, obwohl es regnete."
    }, 
    {
      "category": "Subordination", 
      "id": "00095002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "We have to go now that we have an appointment.", 
        "We have to leave now that we have an appointment.", 
        "We have to go now that we have a date.", 
        "We have to leave now that we have a date.", 
        "We must leave now that we have a deadline.", 
        "We need to leave now that we have an appointment."
      ], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "because|since|as|for|due to the fact that", 
      "positive_tokens": [], 
      "source_sentence": "Wir m\u00fcssen jetzt gehen, da wir einen Termin haben."
    }, 
    {
      "category": "Subordination", 
      "id": "00095003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "([Ii]nstead|[Ii]n place) of|[Rr]ather than", 
      "positive_tokens": [], 
      "source_sentence": "Anstatt dass sie ihre Hausarbeiten macht, spielt sie im Garten Fu\u00dfball."
    }, 
    {
      "category": "Subordination", 
      "id": "00095004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "(even |al)?though", 
      "positive_tokens": [], 
      "source_sentence": "Obwohl mein Bein weh tut, gehe ich Fu\u00dfball spielen."
    }, 
    {
      "category": "Subordination", 
      "id": "00095005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "It's getting stronger by making strength training.", 
        "It is becoming stronger by carrying out force training.", 
        "It is becoming stronger by making strength training.", 
        "You get stronger by strength training."
      ], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "by doing", 
      "positive_tokens": [], 
      "source_sentence": "Man wird st\u00e4rker, indem man Krafttraining macht."
    }, 
    {
      "category": "Subordination", 
      "id": "00095006", 
      "langpair": "deen", 
      "negative_regex": "down, (while|when)", 
      "negative_tokens": [
        "The House was burned while they were in cinema."
      ], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "down (while|when)", 
      "positive_tokens": [
        "The house is burnt while they were in the cinema.", 
        "The house was burnt while they were in the cinema.", 
        "The house is burned while they were in the cinema."
      ], 
      "source_sentence": "Das Haus ist abgebrannt, w\u00e4hrend sie im Kino waren."
    }, 
    {
      "category": "Subordination", 
      "id": "00095007", 
      "langpair": "deen", 
      "negative_regex": "Not knowing", 
      "negative_tokens": [], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "([Bb]ecause|[Ss]ince|[Aa]s|[Ff]or|[Dd]ue to the fact that) he", 
      "positive_tokens": [], 
      "source_sentence": "Da er den K\u00fcnstler nicht kannte, kaufte er das Bild."
    }, 
    {
      "category": "Subordination", 
      "id": "00095008", 
      "langpair": "deen", 
      "negative_regex": "([Ee]ven |[Aa]l)?though\\b.*artist he", 
      "negative_tokens": [], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "([Ee]ven |[Aa]l)?though\\b.*artist, he", 
      "positive_tokens": [], 
      "source_sentence": "Obwohl er den K\u00fcnstler nicht kannte, kaufte er das Bild."
    }, 
    {
      "category": "Subordination", 
      "id": "00095009", 
      "langpair": "deen", 
      "negative_regex": "book, (\\bso\\b( that)?|in order (that|to))", 
      "negative_tokens": [], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "book (\\bso\\b( that)?|in order (that|to))", 
      "positive_tokens": [], 
      "source_sentence": "Er liest das Buch, sodass er den Aufsatz schreiben kann. "
    }, 
    {
      "category": "Subordination", 
      "id": "00095010", 
      "langpair": "deen", 
      "negative_regex": "down, (so( that)?|in order (that|not to|to not))", 
      "negative_tokens": [
        "I note everything, so that I do not forget it.", 
        "I'll write everything up so I don't forget.", 
        "I write everything so I don't forget.", 
        "I write everything so that I don't forget it."
      ], 
      "phenomenon": "Adverbial clause", 
      "positive_regex": "down (so( that)?|in order (that|not to|to not))", 
      "positive_tokens": [
        "I write everything up so I don't forget it.", 
        "I write down everything so that I don't forget it.", 
        "I write everything so I don't forget it.", 
        "I write down everything so I don't forget it.", 
        "I write it up so I don't forget it.", 
        "I write it all in order not to forget it.", 
        "I write up everything so that I do not miss it."
      ], 
      "source_sentence": "Ich schreibe alles auf, damit ich es nicht vergesse."
    }, 
    {
      "category": "Subordination", 
      "id": "00097001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It was Peter who|Peter was| the one who", 
      "positive_tokens": [], 
      "source_sentence": "Es war Peter, der die Vase zerbrochen hat."
    }, 
    {
      "category": "Subordination", 
      "id": "00097002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It is.*decisions what|What we need (are|is).*decisions|decisions are what we need", 
      "positive_tokens": [
        "We need quick and safe decisions.", 
        "What we need is quick and safe choices."
      ], 
      "source_sentence": "Was wir brauchen, sind rasche und sichere Entscheidungen."
    }, 
    {
      "category": "Subordination", 
      "id": "00097003", 
      "langpair": "deen", 
      "negative_regex": "([Tt]im,|the one,)", 
      "negative_tokens": [
        "Tim the one who cooked today was.", 
        "Tim was it, who boiled today."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It was Tim|Tim was the one", 
      "positive_tokens": [
        "Tim cooked today.", 
        "TIM was the one who cooked today."
      ], 
      "source_sentence": "Tim war es, der heute gekocht hat."
    }, 
    {
      "category": "Subordination", 
      "id": "00097004", 
      "langpair": "deen", 
      "negative_regex": "(It('s| is) Lisa|Lisa is the one), (who|that)", 
      "negative_tokens": [
        "It is Lisa, the speech holds.", 
        "It is Lisa, which gives the speech.", 
        "It's Lisa giving the speech."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "(It('s| is) Lisa|Lisa is the one) (who|that)", 
      "positive_tokens": [], 
      "source_sentence": "Es ist Lisa, die die Rede h\u00e4lt."
    }, 
    {
      "category": "Subordination", 
      "id": "00097005", 
      "langpair": "deen", 
      "negative_regex": "(It was Michael|Michael was the one), (who|that)", 
      "negative_tokens": [
        "It was Michael, which came in."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "(It was Michael|Michael was the one) (who|that)", 
      "positive_tokens": [], 
      "source_sentence": "Es war Michael, der hereingekommen ist."
    }, 
    {
      "category": "Subordination", 
      "id": "00097006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Peter the one who broke the vase was.", 
        "Peter was who broken the vase.", 
        "Peter was who broke the vase."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It was Peter who|Peter was the one who", 
      "positive_tokens": [], 
      "source_sentence": "Peter war es, der die Vase zerbrochen hat."
    }, 
    {
      "category": "Subordination", 
      "id": "00097007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lisa's talking."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "(It is|It's) Lisa|Lisa('s| is) the one", 
      "positive_tokens": [], 
      "source_sentence": "Lisa ist es, die die Rede h\u00e4lt."
    }, 
    {
      "category": "Subordination", 
      "id": "00097008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Michael came in."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It was Michael|Michael was the one ", 
      "positive_tokens": [], 
      "source_sentence": "Michael war es, der hereingekommen ist."
    }, 
    {
      "category": "Subordination", 
      "id": "00097009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "My Father is always getting nervous.", 
        "My father is always getting nervous.", 
        "My dad is always nervous.", 
        "My father is always nervous.", 
        "My father is the always nervous."
      ], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It('s| is) my (dad|father)|[Mm]y (dad|father) is the one", 
      "positive_tokens": [
        "It is my Father who is getting nervous."
      ], 
      "source_sentence": "Mein Vater ist es, der immer nerv\u00f6s wird."
    }, 
    {
      "category": "Subordination", 
      "id": "00097010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Cleft sentence", 
      "positive_regex": "It('s| is) my (dad|father)|[Mm]y (dad|father) is the one", 
      "positive_tokens": [
        "It is my Father who is getting nervous."
      ], 
      "source_sentence": "Es ist mein Vater, der immer nerv\u00f6s wird."
    }, 
    {
      "category": "Subordination", 
      "id": "00096001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The Chancellor claims the reforms have been a complete success.", 
        "The Chancellor claims that reforms are a full success."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "(claim(s|ing)|alleg(es|ing)|says).*the reforms are", 
      "positive_tokens": [], 
      "source_sentence": "Der Kanzler behauptet, die Reformen seien ein voller Erfolg."
    }, 
    {
      "category": "Subordination", 
      "id": "00096002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The Chancellor claims that the reforms would be a full success.", 
        "The chancellor claims the reforms would be a full success.", 
        "The Chancellor claims the reforms would be a complete success.", 
        "The Chancellor claims that reforms would be a full success.", 
        "The Chancellor claims the reforms have been a complete success.", 
        "The chancellor claims the reforms would be a resounding success.", 
        "The chancellor claims that the reforms would be a complete success.", 
        "The Chancellor claims that the reforms would be a complete success.", 
        "The Chancellor claims that the reforms have been a complete success.", 
        "The chancellor claims the reforms would be a complete success."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "(claim(s|ing)|alleg(es|ing)).*the reforms are", 
      "positive_tokens": [], 
      "source_sentence": "Der Kanzler behauptet, die Reformen w\u00e4ren ein voller Erfolg."
    }, 
    {
      "category": "Subordination", 
      "id": "00096003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "She said she was at home at that time.", 
        "The woman admits that she was at home at that time."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "(stat(es|ing)|indicat(es|ing)|say(s|ing)).*she (had been|was)", 
      "positive_tokens": [
        "The woman claims that she was at home at the time.", 
        "The woman claims she was at home at that time.", 
        "The woman claims she was home at that time.", 
        "The woman claims she was home at the time."
      ], 
      "source_sentence": "Die Frau gibt an, sie sei zu dieser Zeit zu Hause gewesen."
    }, 
    {
      "category": "Subordination", 
      "id": "00096004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The woman says she would have been home at that time.", 
        "The woman states she would have been home at that time.", 
        "The woman said she was home at that time.", 
        "The woman says she would have been at home at that time.", 
        "The woman claims that she was at home at the time.", 
        "The woman admits that she would have been at home at that time.", 
        "The woman claims she would have been home at the time."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "(stat(es|ing)|indicat(es|ing)|say(s|ing)).*she (had been|was)", 
      "positive_tokens": [
        "The woman claims she was at home at the time.", 
        "The woman claims she was at home at that time.", 
        "The woman claims she was home at this time."
      ], 
      "source_sentence": "Die Frau gibt an, sie w\u00e4re zu dieser Zeit zu Hause gewesen."
    }, 
    {
      "category": "Subordination", 
      "id": "00096005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "say(s|ing).*he has (seen|watched)", 
      "positive_tokens": [
        "The student says he saw the movie.", 
        "The student thinks he has seen the movie.", 
        "The student says he saw the film.", 
        "The student thinks he saw the film.", 
        "The student thinks he saw the movie.", 
        "The student says he saw the Film.", 
        "The student thinks he has seen the film.", 
        "The pupil thinks he has seen the film.", 
        "The pupil thinks he saw the film."
      ], 
      "source_sentence": "Der Sch\u00fcler meint, er habe den Film gesehen."
    }, 
    {
      "category": "Subordination", 
      "id": "00096006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The student said he had seen the film.", 
        "The student thinks he saw the movie.", 
        "The student thinks he saw the film.", 
        "The student thinks he would have seen the film.", 
        "The student thinks he has seen the film.", 
        "The student says he saw the film.", 
        "The student thinks he had seen the film.", 
        "The pupil thinks he had seen the film."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "say(s|ing).*he has (seen|watched)", 
      "positive_tokens": [
        "The pupil thinks he has seen the film.", 
        "The student says he saw the movie.", 
        "The student says he saw the Film."
      ], 
      "source_sentence": "Der Sch\u00fcler meint, er h\u00e4tte den Film gesehen."
    }, 
    {
      "category": "Subordination", 
      "id": "00096007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "She said she had washed the car."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "say(s|ing).*she (has )?washed", 
      "positive_tokens": [], 
      "source_sentence": "Sie sagt, sie habe das Auto gewaschen."
    }, 
    {
      "category": "Subordination", 
      "id": "00096008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "She says she would have washed the car.", 
        "She says she had washed the car."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "say(s|ing).*she (has )?washed", 
      "positive_tokens": [
        "She says that she was washing the car."
      ], 
      "source_sentence": "Sie sagt, sie h\u00e4tte das Auto gewaschen."
    }, 
    {
      "category": "Subordination", 
      "id": "00096009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lisa thinks she was driving the bus.", 
        "Lisa thinks she was riding the bus.", 
        "Lisa said she was driving by bus.", 
        "Lisa thinks she went by bus.", 
        "Lisa says she was driving the bus.", 
        "Lisa thinks she was travelling by bus.", 
        "Lisa says she rode the bus.", 
        "Lisa said that she went by bus."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "say(s|ing).*she (went|was going|took|has taken|travell?ed|was travell?ing)", 
      "positive_tokens": [
        "Lisa says she was on the bus.", 
        "Lisa thinks she took the bus.", 
        "Lisa thinks she was on the bus."
      ], 
      "source_sentence": "Lisa meint, sie sei mit dem Bus gefahren."
    }, 
    {
      "category": "Subordination", 
      "id": "00096010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lisa thinks she was driving the bus.", 
        "Lisa thinks she was riding the bus.", 
        "Lisa thinks she took the bus.", 
        "Lisa thinks she would have gone by bus.", 
        "Lisa says she drove the bus.", 
        "Lisa thinks she would have travelled by bus.", 
        "Lisa thinks she would have taken the bus.", 
        "Lisa thinks she went by bus.", 
        "Lisa says she was driving the bus.", 
        "Lisa thinks she was on the bus.", 
        "Lisa thinks she was travelling by bus.", 
        "Lisa thinks she rode the bus.", 
        "Lisa believes she would have gone by bus.", 
        "Lisa said that she had travelled by bus.", 
        "Lisa thinks she would have been on the bus.", 
        "Lisa means that she would be driven by bus."
      ], 
      "phenomenon": "Indirect speech", 
      "positive_regex": "say(s|ing).*she (went|was going|took|has taken|travell?ed|was travell?ing)", 
      "positive_tokens": [
        "Lisa says she was on the bus.", 
        " Lisa says she had travelled by bus.", 
        " Lisa says she has travelled by bus.", 
        "Lisa thinks she's taken the bus."
      ], 
      "source_sentence": "Lisa meint, sie w\u00e4re mit dem Bus gefahren."
    }, 
    {
      "category": "Subordination", 
      "id": "00098001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I'm planning to start with the tennis.", 
        "I plan on playing tennis.", 
        "I intend to start with the TENNIS GAME.", 
        "I intend to start with the tennis game."
      ], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "to (start|begin) (to play|playing)", 
      "positive_tokens": [], 
      "source_sentence": "Ich habe vor, mit dem Tennisspielen zu beginnen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lena recommends Peter not eat sushi in the cafeteria.", 
        "Lena recommends Peter not eat sushi at the canteen.", 
        "Lena recommends that Peter do not eat Sushi in Mensa."
      ], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "to not (eat|have)|not to (eat|have)", 
      "positive_tokens": [], 
      "source_sentence": "Lena empfiehlt Peter, in der Mensa nicht Sushi zu essen. "
    }, 
    {
      "category": "Subordination", 
      "id": "00098003", 
      "langpair": "deen", 
      "negative_regex": "(has come|came), to help", 
      "negative_tokens": [
        "Peter came, in order to help Lena with the homework."
      ], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "(has come|came) to help", 
      "positive_tokens": [], 
      "source_sentence": "Peter ist gekommen, um Lena mit den Hausaufgaben zu helfen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lisa is trying to get the window out.", 
        "Lisa tries to make the window close.", 
        "Lisa tries to shut the window shut.", 
        "Lisa tries to open the window.", 
        "Lisa tries to make the window.", 
        "Lisa tries to connect the window."
      ], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "to close", 
      "positive_tokens": [
        "Lisa tries to shut the window."
      ], 
      "source_sentence": "Lisa versucht, das Fenster zuzumachen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "It starts to ruin."
      ], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "(start(s|ing)|begin(s|ning)) (to rain|raining)", 
      "positive_tokens": [], 
      "source_sentence": "Es f\u00e4ngt an zu regnen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098006", 
      "langpair": "deen", 
      "negative_regex": "healthy, to eat", 
      "negative_tokens": [], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "healthy to eat", 
      "positive_tokens": [
        "Eating lots of fruit is healthy."
      ], 
      "source_sentence": "Es ist gesund, viel Obst zu essen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "to reading", 
      "positive_tokens": [], 
      "source_sentence": "Ich freue mich darauf, Ihre Gedichte zu lesen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098008", 
      "langpair": "deen", 
      "negative_regex": "(intend|plan), to fly", 
      "negative_tokens": [], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "(intend|plan(ning)?) to fly", 
      "positive_tokens": [], 
      "source_sentence": "Wir beabsichtigen, nach Kuba zu fliegen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The boss ordered me to consider the bill.", 
        "The boss has instructed me to consider the bill.", 
        "President. - The next item is the report (Doc."
      ], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "to check", 
      "positive_tokens": [
        "The boss commissioned me to examine the bill.", 
        "The Chief has asked me to examine the bill.", 
        "The boss asked me to look into the bill.", 
        "The boss instructed me to look into the bill.", 
        "The boss has instructed me to examine the invoice."
      ], 
      "source_sentence": "Der Chef hat mich beauftragt, die Rechnung zu pr\u00fcfen."
    }, 
    {
      "category": "Subordination", 
      "id": "00098010", 
      "langpair": "deen", 
      "negative_regex": "time, to (talk|speak)", 
      "negative_tokens": [], 
      "phenomenon": "Infinitive clause", 
      "positive_regex": "time to (talk|speak)", 
      "positive_tokens": [
        "I don't have time now to talk to you.", 
        "I have no time now to speak with you."
      ], 
      "source_sentence": "Ich habe jetzt keine Zeit, mit dir zu sprechen."
    }, 
    {
      "category": "Subordination", 
      "id": "00481001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I have read that it will ruin tomorrow."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(that )?it( will|('s| is) going to) rain tomorrow", 
      "positive_tokens": [
        "I read it's gonna rain tomorrow."
      ], 
      "source_sentence": "Ich hab gelesen, dass es morgen regnen wird."
    }, 
    {
      "category": "Subordination", 
      "id": "00481002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "It's important to be involved."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(that )?you('re| are)? (participating|taking part|joining|participate|take part|join|join in)", 
      "positive_tokens": [
        "It's important that you get involved.", 
        "It is important that you are involved.", 
        "It is important that you get involved."
      ], 
      "source_sentence": "Dass du mitmachst, ist wichtig."
    }, 
    {
      "category": "Subordination", 
      "id": "00481003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tim is hoping he will make it.", 
        "Tim hopes he will create it."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(that )?he( will|('s| is) going to) (accomplish|manage|handle|get|cope|succeed)", 
      "positive_tokens": [
        "Tim hopes he'll make it.", 
        "Tim hopes he will make it.", 
        "TIM hopes he can do it.", 
        "Tim hopes to make it.", 
        "Tim hopes he can do it.", 
        "Tim hopes he will do it."
      ], 
      "source_sentence": "Tim hofft, er wird es schaffen.\n"
    }, 
    {
      "category": "Subordination", 
      "id": "00481004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Nobody knows who betrayed Lena.", 
        "No one knows who betrayed Lena.", 
        "No one knows who betrayed it.", 
        "No one knows who betrayed it to Lena.", 
        "No one knows who has forgotten Lena.", 
        "No one knows who has betrayed Lena.", 
        "No one knows who betrayed It to Lena."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(who )?((has )?told|(has been|was) telling|(has )?revealed it).*Lena", 
      "positive_tokens": [], 
      "source_sentence": "Niemand wei\u00df, wer es Lena verraten hat."
    }, 
    {
      "category": "Subordination", 
      "id": "00481005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I insist that you do not use this medicine."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(that )?you( take|('re| are) taking).*(medication|medicine|drug)", 
      "positive_tokens": [], 
      "source_sentence": "Ich bestehe darauf, dass du dieses Medikament nimmst."
    }, 
    {
      "category": "Subordination", 
      "id": "00481006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Object clause", 
      "positive_regex": "(that )?you can('t| ?not) (accompany us|come with us)", 
      "positive_tokens": [
        "We understand that you cannot join us.", 
        "We understand you can't go with us."
      ], 
      "source_sentence": "Wir verstehen, dass ihr uns nicht begleiten k\u00f6nnt."
    }, 
    {
      "category": "Subordination", 
      "id": "00481007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "It is annoying that it has missed the train.", 
        "It is annoyed that it has missed the train."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(that )?she (has )?missed the train", 
      "positive_tokens": [
        "missing the train."
      ], 
      "source_sentence": "Sie \u00e4rgert sich dar\u00fcber, dass sie den Zug verpasst hat."
    }, 
    {
      "category": "Subordination", 
      "id": "00481008", 
      "langpair": "deen", 
      "negative_regex": "know, (if|whether) we('re| are).*invited", 
      "negative_tokens": [], 
      "phenomenon": "Object clause", 
      "positive_regex": "know (if|whether) we('re| are).*invited", 
      "positive_tokens": [], 
      "source_sentence": "Sie wissen nicht, ob wir auch eingeladen sind."
    }, 
    {
      "category": "Subordination", 
      "id": "00481009", 
      "langpair": "deen", 
      "negative_regex": "(believes|thinks),( that)? she (saw|has seen) the dog", 
      "negative_tokens": [], 
      "phenomenon": "Object clause", 
      "positive_regex": "(believes|thinks)( that)? she (saw|has seen) the dog", 
      "positive_tokens": [], 
      "source_sentence": "Lena glaubt, dass sie den Hund gesehen hat."
    }, 
    {
      "category": "Subordination", 
      "id": "00481010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "She asked me what kind of dress she wanted to wear.", 
        "She asked me what dress she was going to wear.", 
        "She asked me what kind of suffering she was going to attract.", 
        "She asked me what dress she should attract."
      ], 
      "phenomenon": "Object clause", 
      "positive_regex": "(what|which) dress she (was supposed to|should) (wear|put on)", 
      "positive_tokens": [
        "She asked me what dress to wear.", 
        "She asked me which dress to wear.", 
        "She asked me what dress to put on.", 
        "She asked me which dress to put on.", 
        "She asked me what dress she should dress.", 
        "She asked me which dress she should dress."
      ], 
      "source_sentence": "Sie fragte mich, welches Kleid sie anziehen soll. "
    }, 
    {
      "category": "Subordination", 
      "id": "00655001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What Peter broke, that was the vase.", 
        "What broke Peter down, that was the vase.", 
        "What broke Peter, that was the vase.", 
        "What broke Peter was the vase.", 
        "What Peter broken was the vase.", 
        "What Peter broke down, that was the vase."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It was the vase that Peter broke", 
      "positive_tokens": [
        "What Peter broke was the vase.", 
        "What Peter broke was the Vase.", 
        "What peter broke was the vase.", 
        "What Peter has broken was the vase."
      ], 
      "source_sentence": "Was Peter zerbrochen hat, das war die Vase."
    }, 
    {
      "category": "Subordination", 
      "id": "00655002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Whoever came in, that was Michael.", 
        "Who came in, that was Michael.", 
        "Whoever came in was Michael.", 
        "He who came in was Michael.", 
        "Who came in was Michael.", 
        "Those who came in were Michael.", 
        "The staff were very friendly and helpful."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It was Michael who came in|Michael was the one who came in", 
      "positive_tokens": [
        "The one who came in was Michael."
      ], 
      "source_sentence": "Wer hereingekommen ist, das war Michael."
    }, 
    {
      "category": "Subordination", 
      "id": "00655003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Whoever gets nervous is my father.", 
        "Who always gets nervous, this is my father.", 
        "Whoever gets nervous, that's my father.", 
        "Whoever gets nervous, this is my father.", 
        "Whoever gets nervous, that's my dad.", 
        "Whoever gets nervous is my dad.", 
        "Anyone who always gets nervous is my father.", 
        "Whoever becomes nervous is my father."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It is my father who is always getting nervous|My father is the one who is always getting nervous", 
      "positive_tokens": [], 
      "source_sentence": "Wer immer nerv\u00f6s wird, das ist mein Vater."
    }, 
    {
      "category": "Subordination", 
      "id": "00655004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Whoever opened the window, that was me.", 
        "Who opened the window, that was me.", 
        "Who opened the window, I was.", 
        "Whoever opened the window was me.", 
        "If you opened the window, I was.", 
        "The room was very comfortable and clean.", 
        "Who opened the window that was me.", 
        "Anyone who opened the window was me.", 
        "The room was very small and the bed was very uncomfortable.", 
        "Who opened the window, it was me."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It was me who opened the window", 
      "positive_tokens": [
        "I was the one who opened the window."
      ], 
      "source_sentence": "Wer das Fenster ge\u00f6ffnet hat, das war ich."
    }, 
    {
      "category": "Subordination", 
      "id": "00655005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Who fed the cats, that was them.", 
        "Those who fed the cats were them.", 
        "Who fed the cats, she was.", 
        "Whoever was feeding the cats, she was.", 
        "Whoever fed the cats, that was her.", 
        "Who fed the cats, that was her.", 
        "Whoever fed the cats was her.", 
        "The one who fed the cats was her.", 
        "Who fed the cats, it was them.", 
        "Who fed the cats, that's what they were.", 
        "Whoever fed the cats, that was them.", 
        "Who fed the cats was it.", 
        "Whoever fed the cats was them.", 
        "Who fed the cats that was her.", 
        "Anyone who fed the cats was it.", 
        "Anyone who has fed the cats was it.", 
        "Who fed the cats, was it."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It was she who fed the cats|She was the one who fed the cats", 
      "positive_tokens": [
        "She was the one who fed the Cats."
      ], 
      "source_sentence": "Wer die Katzen gef\u00fcttert hat, das war sie."
    }, 
    {
      "category": "Subordination", 
      "id": "00655006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What was on the commode, that was her book.", 
        "What lay on the dresser, that was her book.", 
        "What was on the dresser, that was her book.", 
        "What was on the chest of drawers, that was her book."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It was her book that was lying", 
      "positive_tokens": [
        "What was on the chest of drawers was her book.", 
        "What was on the dresser was her book.", 
        "What lay on the chest of drawers was her book.", 
        "What was on the commode was her book.", 
        "What lay on the commode was her book.", 
        "What lay on the dresser was her book.", 
        "What was on the comody was her book."
      ], 
      "source_sentence": "Was auf der Kommode lag, das war ihr Buch."
    }, 
    {
      "category": "Subordination", 
      "id": "00655007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What Tim would like to do in his free time is read."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It is reading that Tim likes to do in his spare time", 
      "positive_tokens": [
        "What Tim likes to do in his spare time is to read.", 
        "What Tim likes to do in his spare time is reading.", 
        "What Tim likes to do in his free time is reading.", 
        "What Tim likes to do in his spare time is read.", 
        "What Tim likes to do in his leisure time is reading.", 
        "What Tim likes to do in his free time is read.", 
        "What Tim enjoys doing in his spare time is reading.", 
        "What Tim likes to do in his leisure time is to read."
      ], 
      "source_sentence": "Was Tim gerne in seiner Freizeit macht, ist lesen."
    }, 
    {
      "category": "Subordination", 
      "id": "00655008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What bitten me was his dog.", 
        "What bitten me, that was his dog.", 
        "What bit me, that was his dog.", 
        "What I was bitten by was his dog.", 
        "What bites me was his dog.", 
        "What took me away was his dog.", 
        "It was his dog.", 
        "What has broken me was his dog.", 
        "What has bite me was his dog.", 
        "What had bitten me was his dog."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It was his dog who has bitten me|His dog was the one who has bitten me", 
      "positive_tokens": [
        "What bit me was his dog."
      ], 
      "source_sentence": "Was mich gebissen hat, das war sein Hund."
    }, 
    {
      "category": "Subordination", 
      "id": "00655009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What he wishes, this is a house.", 
        "What he wants, this is a house.", 
        "What he wishes for, that's a house."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It is a house what he wishes for", 
      "positive_tokens": [
        "What he wants is a house.", 
        "What he desires is a house."
      ], 
      "source_sentence": "Was er sich w\u00fcnscht, das ist ein Haus."
    }, 
    {
      "category": "Subordination", 
      "id": "00655010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "What it wants to buy is a new car.", 
        "What they want to buy is a new car."
      ], 
      "phenomenon": "Pseudo-cleft sentence", 
      "positive_regex": "It is a new car that she wants to buy", 
      "positive_tokens": [
        "What she wants to buy is a new car.", 
        "What she wants to purchase is a new vehicle."
      ], 
      "source_sentence": "Was sie kaufen will, ist ein neues Auto."
    }, 
    {
      "category": "Subordination", 
      "id": "00541001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Who is the man who is there there?"
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "(that is )?standing( over)? there", 
      "positive_tokens": [
        "Who's the man who's over there?", 
        "Who is the man over there?", 
        "Who is the man who is there?"
      ], 
      "source_sentence": "Wer ist der Mann, der dort dr\u00fcben steht?"
    }, 
    {
      "category": "Subordination", 
      "id": "00541002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Sabine gives the child, who is constantly crying, potatoes with butter.", 
        "Sabine gives the child, who is constantly screaming, potatoes with butter.", 
        "Sabine gives the child, who constantly cries, potatoes with Butter.", 
        "Sabine gives potatoes with butter to the child, who is constantly screaming.", 
        "Sabine gives the child, who is always screaming, potatoes with butter.", 
        " Sabine gives the child who cries constantly, potatoes with butter.", 
        "Sabine gives the child, who constantly screams, potatoes with butter.", 
        "President. - The next item is the joint debate on the following motions for resolutions:", 
        "Sabine gives the child, who cries constantly, potatoes with butter.", 
        "Sabine gives the child screaming constantly, potatoes with butter."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "the child (that|which|who) (is constantly (screaming|crying)|constantly (screams|cries))", 
      "positive_tokens": [
        "Sabine gives potatoes with butter to the child who screams all the time.", 
        "Sabine gives the child who keeps screaming potatoes with butter.", 
        "Sabine gives the child, who is constantly screaming, potatoes with Butter.", 
        "Sabine gives potatoes with butter to the child who cries constantly.", 
        "Sabine gives the child, which is constantly crying, potatoes with butter."
      ], 
      "source_sentence": "Sabine gibt dem Kind, das st\u00e4ndig schreit, Kartoffeln mit Butter."
    }, 
    {
      "category": "Subordination", 
      "id": "00541003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The man you are currently doing is president of this country.", 
        "The man you have just said is President of that country."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "(that |which |who )?you (have )?just mentioned", 
      "positive_tokens": [], 
      "source_sentence": "Der Mann, welchen du gerade erw\u00e4hntest, ist Pr\u00e4sident dieses Landes. "
    }, 
    {
      "category": "Subordination", 
      "id": "00541004", 
      "langpair": "deen", 
      "negative_regex": "man, whose car you (have )?bought, is|man whose car you (have )?bought, is|man, whose car you (have )?bought is", 
      "negative_tokens": [
        "The man you bought is a crook."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "man whose car you( have|'ve)? bought is", 
      "positive_tokens": [], 
      "source_sentence": "Der Mann, dessen Auto du gekauft hast, ist ein Gauner. "
    }, 
    {
      "category": "Subordination", 
      "id": "00541005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The man you have shown is my uncle.", 
        "The man on whom you have shown is my uncle.", 
        "The man you showed up on is my uncle.", 
        "The man you showed on is my uncle.", 
        "The man you've shown is my uncle.", 
        "The man you pointed to is my uncle.", 
        "The man on whom you showed me is my uncle.", 
        "The man you've shown on is my uncle.", 
        "The man you showed is my uncle.", 
        "The man on which you showed is my uncle.", 
        "The man on which you have shown is my uncle.", 
        "The man you showed up to is my uncle.", 
        "The man you've been to is my uncle."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "(that |which| who )?you( have|'ve)? pointed at", 
      "positive_tokens": [
        "The man you pointed out is my uncle.", 
        "The man you've pointed to is my uncle."
      ], 
      "source_sentence": "Der Mann, auf welchen du gezeigt hast, ist mein Onkel. "
    }, 
    {
      "category": "Subordination", 
      "id": "00541006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tim has a meeting with the woman who works in bakery."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "((that|who|which) works|((that|who|which) is )?working) (in|at) the (bakery|baker's|bakehouse)", 
      "positive_tokens": [], 
      "source_sentence": "Tim hat eine Verabredung mit der Frau, die in der B\u00e4ckerei arbeitet."
    }, 
    {
      "category": "Subordination", 
      "id": "00541007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Where the tree is, Lena's bicycle was stolen."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "[Ww]here the tree (stands|is standing)", 
      "positive_tokens": [
        "Where the tree is, Lena's bike was stolen."
      ], 
      "source_sentence": "Dort, wo der Baum steht, wurde Lenas Fahrrad gestohlen."
    }, 
    {
      "category": "Subordination", 
      "id": "00541008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I am referring to the woman who bears the red clothes."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "((who|that|which) wears|((that|who|which) is)? wearing) the red dress", 
      "positive_tokens": [
        "I am referring to the woman who carries the red dress."
      ], 
      "source_sentence": "Ich meine die Frau, die das rote Kleid tr\u00e4gt."
    }, 
    {
      "category": "Subordination", 
      "id": "00541009", 
      "langpair": "deen", 
      "negative_regex": "house, (that |which )?has a blue roof, belongs|house (that |which )?has a blue roof, belongs|house, (that |which )?has a blue roof belongs", 
      "negative_tokens": [
        "The house, which has a Blue Roof, belongs to my uncle.", 
        "The House, which has a blue roof, belongs to my uncle."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "house (that |which )?has a blue roof belongs", 
      "positive_tokens": [
        "The house with a blue roof belongs to my uncle."
      ], 
      "source_sentence": "Das Haus, das ein blaues Dach hat, geh\u00f6rt meinem Onkel. "
    }, 
    {
      "category": "Subordination", 
      "id": "00541010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "That is all I ask you for.", 
        "That's all I'm asking you for."
      ], 
      "phenomenon": "Relative clause", 
      "positive_regex": "(that |which )?I(('m| am) asking| ask) of you", 
      "positive_tokens": [
        "That's all I ask you to do.", 
        "That's all I'm asking you to do.", 
        "That is all I ask you to do.", 
        "That's all I'm asking y'all.", 
        "That's all I ask you for.", 
        "That is all I would ask you to do.", 
        "That is all I ask you."
      ], 
      "source_sentence": "Das ist alles, worum ich euch bitte."
    }, 
    {
      "category": "Subordination", 
      "id": "00547001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I am very pleased that Peter is here."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "Lisa.*that Peter is (there|here)", 
      "positive_tokens": [
        "Lisa is very pleased to see Peter here."
      ], 
      "source_sentence": "Es freut Lisa sehr, dass Peter da ist."
    }, 
    {
      "category": "Subordination", 
      "id": "00547002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "That Peter is there, Lisa delighted.", 
        "That Peter is there, Lisa is very happy.", 
        "That Peter is there, Lisa is very pleased."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "Lisa.*that Peter is (there|here)", 
      "positive_tokens": [
        "Lisa is delighted to see Peter here."
      ], 
      "source_sentence": "Dass Peter da ist, freut Lisa sehr."
    }, 
    {
      "category": "Subordination", 
      "id": "00547003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "It's questionable if you're gonna find her key again."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It('s| is).*(whether|if) Lena (will|is going to) (retrieve|re(dis)?cover|find.*again)", 
      "positive_tokens": [
        "It is questionable whether Lena will find her key.", 
        "It's debatable whether Lena finds her key.", 
        "It's questionable if Lena finds her key.", 
        "It's questionable whether Lena finds her key again.", 
        "It is doubtful whether Lena will find her key.", 
        "It's questionable if lena finds her key.", 
        "It is questionable whether Lena finds her key again.", 
        "It is doubtful whether Lena finds her key again.", 
        "It is questionable whether Lena finds her key.", 
        "It is questionable if Lena finds her key again.", 
        "It's debatable whether Lena finds her key again.", 
        "It's questionable if Lena finds her key again."
      ], 
      "source_sentence": "Es ist fraglich, ob Lena ihren Schl\u00fcssel wiederfindet."
    }, 
    {
      "category": "Subordination", 
      "id": "00547004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "If Lena will find her key, it's questionable.", 
        "If Lena will find her key, again, is questionable.", 
        "Whether Lena will find its key is questionable."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It('s| is).*(whether|if) Lena (will|is going to) (retrieve|re(dis)?cover|find.*again)", 
      "positive_tokens": [
        "Whether Lena will find her key again is questionable.", 
        "Whether Lena will find her key is questionable.", 
        "Whether Lena will find her key is debatable.", 
        "Whether Lena will find her key again is debatable.", 
        "It is doubtful whether Lena will find her key."
      ], 
      "source_sentence": "Ob Lena ihren Schl\u00fcssel wiederfinden wird, ist fraglich."
    }, 
    {
      "category": "Subordination", 
      "id": "00547005", 
      "langpair": "deen", 
      "negative_regex": "It('s| is) (uncertain|unclear), when we(('re| are) going to|('ll| will) arrive)", 
      "negative_tokens": [], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It('s| is) (uncertain|unclear) when we(('re| are) going to|('ll| will) arrive)", 
      "positive_tokens": [], 
      "source_sentence": "Es ist ungewiss, wann wir ankommen werden."
    }, 
    {
      "category": "Subordination", 
      "id": "00547006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "When we will arrive, it is uncertain.", 
        "When we will arrive, is uncertain.", 
        "When we arrive will be uncertain."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It('s| is).*when we(('re| are) going to|('ll| will) arrive)", 
      "positive_tokens": [
        "When we will arrive is uncertain.", 
        "When we arrive is uncertain."
      ], 
      "source_sentence": "Wann wir ankommen werden, ist ungewiss."
    }, 
    {
      "category": "Subordination", 
      "id": "00547007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I was struck by how you solved the task."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It (has )?impressed me.*how you solved|I was impressed by the way you solved", 
      "positive_tokens": [
        "I was impressed with how you solved the task.", 
        "I was impressed by how you solved the problem.", 
        "I was impressed with how you got the job done.", 
        "I was impressed by how you solved the task.", 
        "I was impressed with the way you handled the task.", 
        "I was impressed by how you got the job done.", 
        "It impressed me how you did the job.", 
        "I was impressed by how you have done the job.", 
        "I was impressed by how you had done the job.", 
        "I was impressed by the way in which you have solved the task.", 
        "I was impressed how you solved the task."
      ], 
      "source_sentence": "Es hat mich beeindruckt, wie du die Aufgabe gel\u00f6st hast. "
    }, 
    {
      "category": "Subordination", 
      "id": "00547008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "How you solved the task struck me.", 
        "How you solved the task, impressed me.", 
        "As you have solved the task, I was impressed."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It (has )?impressed me.*how you solved|I was impressed by the way you solved", 
      "positive_tokens": [
        "I was impressed by how you solved the problem.", 
        "I was impressed by how you solved the task.", 
        "How you solved the task impressed me.", 
        "I was impressed by how you did the job.", 
        "I was impressed with how you solved the task.", 
        "How you solved the problem impressed me.", 
        "I was impressed by the way in which you dealt with the task."
      ], 
      "source_sentence": "Wie du die Aufgabe gel\u00f6st hast, hat mich beeindruckt."
    }, 
    {
      "category": "Subordination", 
      "id": "00547009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Tim was hard to forgive Peter."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It was.*to forgive Peter", 
      "positive_tokens": [
        "Tim had a hard time forgiving Peter.", 
        "Tim found it hard to forgive Peter.", 
        "Tim found it difficult to forgive Peter."
      ], 
      "source_sentence": "Es fiel Tim schwer, Peter zu verzeihen. "
    }, 
    {
      "category": "Subordination", 
      "id": "00547010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "To Forgive Peter, Tim was hard.", 
        "Peter's forgiveness was difficult for Tim.", 
        "To forgive Peter, Tim fell hard.", 
        "Peter to forgive Tim fell hard.", 
        "Forgiving Tim was hard to forgive.", 
        "Peter was hard to forgive Tim.", 
        "Peter forgave Peter hard.", 
        "Peter to forgive fell Tim hard.", 
        "Forgiving Peter fell hard Tim.", 
        "Peter to forgive if Tim was difficult."
      ], 
      "phenomenon": "Subject clause", 
      "positive_regex": "It was.*to forgive Peter", 
      "positive_tokens": [
        "Tim found it difficult to forgive Peter.", 
        "Forgiving Peter was hard for Tim.", 
        "Tim found it hard to forgive Peter.", 
        "Peter found it difficult to forgive Tim.", 
        "Tim had a hard time forgiving Peter."
      ], 
      "source_sentence": "Peter zu verzeihen fiel Tim schwer."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "In Case your train is delayed, we will be waiting for you in the restaurant."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "(If|In case) your train is ((running )?late|delayed).*we('ll| will) (wait|be waiting).*for you", 
      "positive_tokens": [
        "If your course is late, we will wait at the restaurant for you."
      ], 
      "source_sentence": "Falls dein Zug versp\u00e4tet ist, werden wir im Restaurant auf dich warten."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I would send her an invitation if I would find her address.", 
        "I became it an invitation send, if I would find its address.", 
        "I would send her an invitation if I could find her address.", 
        "I would send her an invitation when I could find her address."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "I('d| would) send.*if I found|If I found.*I('d| would) send", 
      "positive_tokens": [
        "I would send her an invitation if i found her address.", 
        "I would invite her if I could find her address."
      ], 
      "source_sentence": "Ich w\u00fcrde ihr eine Einladung schicken, wenn ich ihre Adresse finden w\u00fcrde."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "If I find their address, I would send her an invitation.", 
        "If I would find its address, I became it an invitation sent.", 
        "If I would find her address, I would send her an invitation.", 
        "If I could find her address, I would send her an invitation."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "I('d| would) send.*if I found|If I found.*I('d| would) send", 
      "positive_tokens": [
        "If I were to find her address, I would send her an invitation.", 
        "If I were to find their address, I would send it an invitation."
      ], 
      "source_sentence": "Wenn ich ihre Adresse finden w\u00fcrde, w\u00fcrde ich ihr eine Einladung schicken."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "If I had not learned, would not have I mean examinations existed."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "I would(n't| not) have passed.*if I had(n't| not) (studied|learned)|If I had(n't| not) (studied|learned).*I would(n't| not) have passed", 
      "positive_tokens": [], 
      "source_sentence": "Wenn ich nicht gelernt h\u00e4tte, h\u00e4tte ich meine Pr\u00fcfungen nicht bestanden."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Conditional", 
      "positive_regex": "I('d| would) (buy|purchase).*if I had money|If I had money.*I('d| would) (buy|purchase)", 
      "positive_tokens": [], 
      "source_sentence": "Wenn ich Geld h\u00e4tte, w\u00fcrde ich mir ein Auto kaufen. "
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "If Tim had enough money, he would have made a world trip.", 
        "If Tim had had had enough money, he would have travelled around the world.", 
        "If Tim had enough money, he would have made a trip around the world."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "He('d| would) have (toured|gone).*if Tim had had|If Tim had had.*he('d| would) have (toured|gone|made)", 
      "positive_tokens": [
        "If Tim had had enough money, he would have made a world trip.", 
        "If Tim had had enough money, he would have made a trip around the world.", 
        "If Tim had had enough money, he would have made a voyage round the world.", 
        "If Tim had had enough money, he would have taken a world tour.", 
        "If Tim had had enough money, he would have traveled the world.", 
        "If Tim had had enough money, he would have taken a trip around the world.", 
        "If Tim had had enough money, he would have travelled around the world."
      ], 
      "source_sentence": "Wenn Tim genug Geld gehabt h\u00e4tte, h\u00e4tte er eine Weltreise gemacht."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "I didn't have to work, I would accompany you.", 
        "If I would not have to work, I would accompany you.", 
        "If I hadn't to work, I would accompany you.", 
        "If I hadn't to work, I'd be with you.", 
        "If I had not to work, I would accompany you.", 
        "If I had not got to work, I would accompany you.", 
        "If I didn't work, I would accompany you.", 
        "If I were not working, I would accompany you.", 
        "I wouldn't work, I would accompany you."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "I('d| would) (accompany you|come with you).*if I did(n't| not) have to work|If I did(n't| not) have to work.*I('d| would) (accompany you|come with you)", 
      "positive_tokens": [
        "If I didn't have to work, I'd be with you.", 
        "If I didn't have to work, I'd go with you."
      ], 
      "source_sentence": "M\u00fcsste ich nicht arbeiten, w\u00fcrde ich euch begleiten."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542008", 
      "langpair": "deen", 
      "negative_regex": "\\b[Yy]ou\\b|\\b[Tt]hey\\b", 
      "negative_tokens": [
        "She would love for him to come to her party.", 
        "She would be pleased if he would come to her party."
      ], 
      "phenomenon": "Conditional", 
      "positive_regex": "She('d| would) be.*if he (came|went)|If he came.*she('d| would) be ", 
      "positive_tokens": [
        "She would be happy if he joined her party.", 
        "She would be happy to have him come to her party.", 
        "She would love him to come to her party.", 
        "She would be happy if he were to join her party."
      ], 
      "source_sentence": "Sie w\u00fcrde sich freuen, wenn er zu ihrer Party k\u00e4me."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542009", 
      "langpair": "deen", 
      "negative_regex": "\\b[Yy]ou\\b|\\b[Tt]hey\\b", 
      "negative_tokens": [], 
      "phenomenon": "Conditional", 
      "positive_regex": "She('d| would) be.*if he could come|If he could come.*she('d| would) be ", 
      "positive_tokens": [
        "She would love if he could come to her party."
      ], 
      "source_sentence": "Sie w\u00fcrde sich freuen, wenn er zu ihrer Party kommen k\u00f6nnte."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00542010", 
      "langpair": "deen", 
      "negative_regex": "\\b[Yy]ou\\b|\\b[Tt]hey\\b", 
      "negative_tokens": [], 
      "phenomenon": "Conditional", 
      "positive_regex": "She('d| would) (address|speak).*if she (was|were)|If she (was|were|had).*she('d| would) (address|speak|talk)", 
      "positive_tokens": [
        "If she had more courage, she would appeal to him.", 
        "If she had more courage, she'd appeal to him."
      ], 
      "source_sentence": "Wenn sie mehr Mut h\u00e4tte, w\u00fcrde sie ihn ansprechen."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Go and Hol beer for me!", 
        "God and hol Beer for me!", 
        "Go and pick beer for me!"
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Go.*(get|fetch)", 
      "positive_tokens": [], 
      "source_sentence": "Geh und hol Bier f\u00fcr mich! "
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Imperative", 
      "positive_regex": "Sleep", 
      "positive_tokens": [], 
      "source_sentence": "Schlaf jetzt!"
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Do not change sleep.", 
        "No sleeping wall."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Do(n't| not) sleepwalk|No sleepwalking", 
      "positive_tokens": [
        "No Sleepwalking.", 
        "No sleep walking.", 
        "No sleepwalking."
      ], 
      "source_sentence": "Kein Schlafwandeln."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037004", 
      "langpair": "deen", 
      "negative_regex": "Keep Forbidden", 
      "negative_tokens": [
        "Keep forbidden.", 
        "No holding.", 
        "Keep banned.", 
        "Keeping banned.", 
        "Keep prohibited.", 
        "Forbade to stops.", 
        "Ban.", 
        "Hold forbidden.", 
        "Keep it banned.", 
        "Holding banned.", 
        "Keeping forbidden.", 
        "Prohibited.", 
        "Holding prohibited.", 
        "Keeping prohibited.", 
        "President. - The next item is the report (Doc.", 
        "Holding forbidden.", 
        "Prohibition."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Do(n't| not) (stop|park)|(Parking|Stopping) prohibited|No (parking|stopping)", 
      "positive_tokens": [], 
      "source_sentence": "Halten verboten."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Do not let a car drive you.", 
        "Do not let you from a car run over.", 
        "Don't go over by a car.", 
        "Don 't let a car drive you over.", 
        "Don't let yourself run over by a car.", 
        "Don't let yourself be driven by a car.", 
        "Do not let yourself beaten by a car.", 
        "Do not pass over a car.", 
        "Do not let yourself be crossed by a car.", 
        "Don't let your car cross you."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Do(n't| not) get run over", 
      "positive_tokens": [
        "Don't let a car hit you.", 
        "Don't get hit by a car.", 
        "Don't let a car run you over.", 
        "Don't be run over by a car.", 
        "Don't get ran over by a car.", 
        "Don't be driven over by a car.", 
        "Don't let a car drive you over.", 
        "Don't let a car run over you.", 
        "Don't let a car run you over you."
      ], 
      "source_sentence": "Lass dich nicht von einem Auto \u00fcberfahren."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Do not become suffer.", 
        "I'm not going to get sick.", 
        "Will not be sick."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Do(n't| not) get", 
      "positive_tokens": [
        "Do not become ill."
      ], 
      "source_sentence": "Werde nicht krank."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Sleep here not one.", 
        "Don't sleep in here.", 
        "Sleep here not.", 
        "Don't sleep here.", 
        "Do not sleep here.", 
        "No sleep here.", 
        "Sleep isn't a factor here.", 
        "Sleep is not an issue here.", 
        "Sleep not one here.", 
        "Sleep not here."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Do(n't| not) fall asleep", 
      "positive_tokens": [], 
      "source_sentence": "Schlaf hier nicht ein."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Slow down a lower gear.", 
        "Slowly lay down a lower aisle.", 
        "Set a lower gear slowly.", 
        "Slowly set down a lower gear.", 
        "Set a lower course slowly.", 
        "Enter a lower gear."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "shift|engage|put", 
      "positive_tokens": [
        "Slowly insert a lower gear.", 
        "Slowly enter a lower gear.", 
        "Slowly lower the gear.", 
        "Slowly move into a lower gear."
      ], 
      "source_sentence": "Legen Sie langsam einen niedrigeren Gang ein."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Slowly give a little sugar to it.", 
        "Slowly give a little sugar to that.", 
        "Give them a little sugar.", 
        "Give slowly a little sugar."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "\\b[Aa]dd\\b", 
      "positive_tokens": [], 
      "source_sentence": "Geben Sie langsam ein wenig Zucker dazu."
    }, 
    {
      "category": "Verb tense/aspect/mood", 
      "id": "00037010", 
      "langpair": "deen", 
      "negative_regex": "Gassi", 
      "negative_tokens": [
        "Go with the dog Gassi.", 
        "Walk with the dog's airbag.", 
        "Walking the dog.", 
        "Walk with the dog assi."
      ], 
      "phenomenon": "Imperative", 
      "positive_regex": "Go for a walk", 
      "positive_tokens": [
        "Take the dog for a walk.", 
        "Walk with the dog.", 
        "Go with the dog."
      ], 
      "source_sentence": "Geh mit dem Hund Gassi."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The manager is keeping the president before the crash.", 
        "The manager preserves the president before the crash."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "[Tt]he manager (saves|is saving) the president from (the crash|crashing)", 
      "positive_tokens": [
        "The manager shall keep the President from crashing.", 
        "The Manager keeps the president from crashing.", 
        "The manager keeps the president from crashing.", 
        "The manager keeps the president from the crash.", 
        "The manager keeps the President from crashing.", 
        "The manager protects the president from the crash.", 
        "The manager will save the president from the crash.", 
        "The manager keeps the president from falling.", 
        "The manager protects the president from falling.", 
        "The manager saves the president from falling.", 
        "The Manager saves the president from the crash.", 
        "The manager protects the president from the fall."
      ], 
      "source_sentence": "Der Manager bewahrt den Pr\u00e4sidenten vor dem Absturz."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012002", 
      "langpair": "deen", 
      "negative_regex": "looked at", 
      "negative_tokens": [
        "Suddenly, Otto saw his boyfriend."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "Otto saw his friend", 
      "positive_tokens": [
        "Otto suddenly saw his friend.", 
        "Suddenly Otto saw his boyfriend."
      ], 
      "source_sentence": "Pl\u00f6tzlich sah Otto seinen Freund."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012003", 
      "langpair": "deen", 
      "negative_regex": "is on", 
      "negative_tokens": [
        "The manager is on the test.", 
        "The Manager is on the Test.", 
        "The manager consists of the test."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "manager (insists|is insisting) on the test", 
      "positive_tokens": [
        "The Manager insists on the Test.", 
        "The manager insists on testing."
      ], 
      "source_sentence": "Der Manager besteht auf den Test."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The manager is right for the president.", 
        "The manager agrees for the president.", 
        "The manager votes for president."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "[Tt]he manager (votes|ballots|is (voting|balloting|casting a vote)) for the president", 
      "positive_tokens": [
        "The manager votes for the President.", 
        "The Manager voted for the President.", 
        "The Manager is voting for the president.", 
        "The Manager votes for the president.", 
        "The manager is voting in favour of the President."
      ], 
      "source_sentence": "Der Manager stimmt f\u00fcr den Pr\u00e4sidenten."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The President calls for milk.", 
        "The president calls for milk.", 
        "The president demands milk.", 
        "The President is asking for milk.", 
        "The president is asking for milk.", 
        "The president's asking for milk.", 
        "The President asks for milk.", 
        "The president is demanding milk.", 
        "The president asks for milk.", 
        "The President is demanding milk.", 
        "The president is calling for milk.", 
        "The President demands milk."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "[Tt]he president ((craves|longs|desires|is (longing|craving) for|wants)) milk", 
      "positive_tokens": [], 
      "source_sentence": "Den Pr\u00e4sidenten verlangt nach Milch."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lena helping the man cross the street.", 
        "Lena helps the man crossing the road."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "Lena (helps|is helping) the man( to)? cross the (street|road)", 
      "positive_tokens": [], 
      "source_sentence": "Lena hilft dem Mann, die Stra\u00dfe zu \u00fcberqueren."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012007", 
      "langpair": "deen", 
      "negative_regex": "pancakes", 
      "negative_tokens": [
        "Tim ordered a pancakes with a small salad.", 
        "Tim ordered a pan cake with a small salad."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "Tim ordered a pancake with a small salad", 
      "positive_tokens": [
        "TIM ordered a pancake with a small salad.", 
        "Tim ordered a pancake with a little salad."
      ], 
      "source_sentence": "Tim bestellte einen Pfannkuchen mit einem kleinen Salat."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "They remind the deceased."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "(You|They) (commemorate|remember|are (remembering|commemorating)) the (decedents|deceased)\\.", 
      "positive_tokens": [
        "They remember those who died.", 
        "They remember the dead."
      ], 
      "source_sentence": "Sie gedenken der Verstorbenen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012009", 
      "langpair": "deen", 
      "negative_regex": "\\bbefore\\b|in front of", 
      "negative_tokens": [
        "The president is greying ahead of the press conference.", 
        "The president grins ahead of the press conference.", 
        "The president has a horror of the press conference.", 
        "The president grutted ahead of the press conference.", 
        "The president grapples before the press conference.", 
        "The President is digging ahead of the press conference.", 
        "The president is grinning ahead of the press conference.", 
        "The president is scathing of the press conference.", 
        "The President is horrified at the press conference.", 
        "The President is gravely at the press conference.", 
        "President. - The next item is the joint debate on the following reports:"
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "The president (dreads|is horrified by|is terrified of) the press conference", 
      "positive_tokens": [
        "The President dreads the press conference.", 
        "The President is afraid of the press conference.", 
        "The President is dreading the press conference.", 
        "The president is afraid of the press conference.", 
        "The President is terrified of the press conference."
      ], 
      "source_sentence": "Dem Pr\u00e4sidenten graut vor der Pressekonferenz."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Peter owes a favor to his friend.", 
        "Peter owes a pleasure to his friend.", 
        "Peter owes a favour to his friend."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "Peter owes his friend a favou?r", 
      "positive_tokens": [
        "Peter owes his friend a Favor.", 
        "Peter owes his boyfriend a favor."
      ], 
      "source_sentence": "Peter schuldet seinem Freund einen Gefallen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012011", 
      "langpair": "deen", 
      "negative_regex": "their mother", 
      "negative_tokens": [
        "Lisa deceived its mother.", 
        "Lisa relied on her mother.", 
        "Lisa has lied her mother."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "Lisa( has)? lied to her mother", 
      "positive_tokens": [], 
      "source_sentence": "Lisa hat ihre Mutter belogen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012012", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Case government", 
      "positive_regex": "I remember him\\.", 
      "positive_tokens": [], 
      "source_sentence": "Ich erinnere mich an ihn. "
    }, 
    {
      "category": "Verb valency", 
      "id": "00012013", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The story agreed Tim was sad.", 
        "The story agreed with Tim sad.", 
        "History tuned Tim sadly.", 
        "The story was right Tim sadly.", 
        "The story was sad to Tim.", 
        "History told Tim sad.", 
        "The story was sad.", 
        "The story sadly agreed with Tim.", 
        "The story was sadly true of Tim.", 
        "The story was sad for Tim.", 
        "History was sad.", 
        "The story was true Tim sad.", 
        "History was saddened by Tim."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "The story (saddened Tim|(made|was making) Tim sad)|Tim was saddened by the story", 
      "positive_tokens": [
        "The story voted Tim sad."
      ], 
      "source_sentence": "Die Geschichte stimmte Tim traurig."
    }, 
    {
      "category": "Verb valency", 
      "id": "00012014", 
      "langpair": "deen", 
      "negative_regex": "Tilo asks his guests (to apologize|for apologies)?", 
      "negative_tokens": [
        "Tilo asks his guests to apologize for the mishap.", 
        "Tilo asks his guests for the misfortune to apologise.", 
        "Tilo asks his guests for the mishap apology.", 
        "Tilo asks its guests for the misfortune for apology.", 
        "Tilo apologizes for his mishap.", 
        "Tilo asks his guests for the miscellaneous apology.", 
        "Tilo asks his guests for the misfortune to apologize.", 
        "Tilo is asking his guests to apologize for the mishap.", 
        "Tilo apologizes his guests for the misfortune.", 
        "Tilo apologizes for his misfortune.", 
        "Tilo apologize to his guests for the mishap."
      ], 
      "phenomenon": "Case government", 
      "positive_regex": "Tilo apologi(z|s)es to his guests for.*", 
      "positive_tokens": [
        "Tilo wishes to apologise to his guests for the misfortune."
      ], 
      "source_sentence": "Tilo bittet seine G\u00e4ste f\u00fcr das Missgeschick um Entschuldigung."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482001", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The lawn is always stitched on Wednesdays.", 
        "The lawn is always shown on Wednesdays.", 
        "The lawn will always be mowed on Wednesdays.", 
        "The lawn is being fattened every week."
      ], 
      "phenomenon": "Passive voice", 
      "positive_regex": "The lawn is always( being)? (mowed|mown)", 
      "positive_tokens": [
        "The grass is always mowed on Wednesdays.", 
        "The lawn is mowed every Wednesday."
      ], 
      "source_sentence": "Der Rasen wird immer mittwochs gem\u00e4ht."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482002", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Passive voice", 
      "positive_regex": "The car is( being)? repaired by the mechanic", 
      "positive_tokens": [
        "The car will be repaired by the mechanic.", 
        "The mechanic repairs the car."
      ], 
      "source_sentence": "Das Auto wird vom Mechaniker repariert."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482003", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The candles were inflated by the wind."
      ], 
      "phenomenon": "Passive voice", 
      "positive_regex": "The candles were blown out by the wind", 
      "positive_tokens": [
        "The candles were blown out by the Wind.", 
        "Candles were blown out by the wind.", 
        "The candles were blown through the wind.", 
        "The candles were blown off by the wind."
      ], 
      "source_sentence": "Die Kerzen wurden durch den Wind ausgeblasen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482004", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Passive voice", 
      "positive_regex": "The patient is( being)? (saved|rescued) by( the)? (surgery|operation)", 
      "positive_tokens": [
        "The Patient is saved by the Operation.", 
        "The Patient is rescued by the Operation.", 
        "The patient is saved by the Operation."
      ], 
      "source_sentence": "Der Patient wird durch die Operation gerettet."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482005", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Passive voice", 
      "positive_regex": "The swimming pool (is( being)?|will be) closed", 
      "positive_tokens": [], 
      "source_sentence": "Das Schwimmbad wird geschlossen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482006", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "The homework is made."
      ], 
      "phenomenon": "Passive voice", 
      "positive_regex": "The homework (has been|is) done", 
      "positive_tokens": [
        "Homework is done."
      ], 
      "source_sentence": "Die Hausaufgaben sind gemacht."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482007", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Passive voice", 
      "positive_regex": "Lena is( being)? called by the teacher", 
      "positive_tokens": [], 
      "source_sentence": "Lena wird von der Lehrerin gerufen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482008", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "One helps to me by Lena.", 
        "I will be helped by Lena."
      ], 
      "phenomenon": "Passive voice", 
      "positive_regex": "I('m| am)( being)? helped by Lena", 
      "positive_tokens": [
        "Lena is helping me.", 
        "Lena helps me."
      ], 
      "source_sentence": "Mir wird von Lena geholfen."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482009", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [], 
      "phenomenon": "Passive voice", 
      "positive_regex": "Tim was (brought|taken) to.*hospital", 
      "positive_tokens": [
        "Tim was brought in the hospital.", 
        "TIM was taken to hospital.", 
        "Tintin was taken to hospital."
      ], 
      "source_sentence": "Tim wurde ins Krankenhaus gebracht."
    }, 
    {
      "category": "Verb valency", 
      "id": "00482010", 
      "langpair": "deen", 
      "negative_regex": "", 
      "negative_tokens": [
        "Lena was asked for help from Tim."
      ], 
      "phenomenon": "Passive voice", 
      "positive_regex": "Lena was asked for help by Tim|Tim asked (Lena for help|for Lena's help)", 
      "positive_tokens": [
        "Lena was approached for help by Tim.", 
        "Lena was asked for help by TIM.", 
        "Lena was asked by Tim for help.", 
        "Lena was approached by Tim for help."
      ], 
      "source_sentence": "Lena wurde von Tim um Hilfe gebeten."
    }
  ]
}